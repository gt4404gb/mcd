import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useEffect, useState } from 'react';
import { Popover, Tooltip, ConfigProvider } from 'antd';
import Checkbox from '../checkbox';
import IconFont from '../common/IconFont';
export default (function (_ref) {
  var allColumns = _ref.allColumns,
    _ref$filterColumns = _ref.filterColumns,
    filterColumns = _ref$filterColumns === void 0 ? [] : _ref$filterColumns,
    selectedColumns = _ref.selectedColumns,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    _ref$className = _ref.className,
    className = _ref$className === void 0 ? '' : _ref$className,
    callback = _ref.callback;
  var allFilterList = filterColumns;
  var _useState = useState(selectedColumns || []),
    _useState2 = _slicedToArray(_useState, 2),
    selectedOptions = _useState2[0],
    setSelectedOptions = _useState2[1]; // 记录选择的keyList
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    indeterminate = _useState4[0],
    setindeterminate = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    checkAll = _useState6[0],
    setCheckAll = _useState6[1];
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var filterOptions = allColumns.filter(function (item) {
    return filterColumns.includes(item.dataIndex);
  }).map(function (option) {
    return {
      label: option.title,
      value: option.dataIndex,
      key: option.key || option.dataIndex
    };
  });
  useEffect(function () {
    setSelectedOptions(selectedColumns || []);
    setCheckAll((selectedColumns === null || selectedColumns === void 0 ? void 0 : selectedColumns.length) === allFilterList.length);
    setindeterminate(!!(selectedColumns === null || selectedColumns === void 0 ? void 0 : selectedColumns.length) && (selectedColumns === null || selectedColumns === void 0 ? void 0 : selectedColumns.length) < allFilterList.length);
  }, [selectedColumns]);
  var onChange = function onChange(checkedValues) {
    setCheckAll(checkedValues.length === allFilterList.length);
    setindeterminate(!!checkedValues.length && checkedValues.length < allFilterList.length);
    setSelectedOptions(checkedValues);
    callback(checkedValues);
  };
  // 全选
  var onCheckAllChange = function onCheckAllChange(e) {
    setSelectedOptions(e.target.checked ? allFilterList : []);
    setindeterminate(false);
    setCheckAll(e.target.checked);
    callback(e.target.checked ? allFilterList : []);
  };
  // 重置
  var resetCheckbox = function resetCheckbox() {
    setSelectedOptions(allFilterList);
    callback(allFilterList);
  };
  var content = /*#__PURE__*/React.createElement("div", {
    className: "".concat(getPrefixCls(), "-tableFilter-setting-wrap")
  }, /*#__PURE__*/React.createElement(Checkbox, {
    indeterminate: indeterminate,
    onChange: onCheckAllChange,
    checked: checkAll,
    key: "all"
  }, "\u5168\u90E8"), /*#__PURE__*/React.createElement(Checkbox.Group, {
    value: selectedOptions,
    onChange: onChange
  }, filterOptions.map(function (option) {
    return /*#__PURE__*/React.createElement(Tooltip, {
      placement: "left",
      key: option.value,
      title: option.label,
      getPopupContainer: function getPopupContainer(triggerNode) {
        return triggerNode.parentNode;
      }
    }, /*#__PURE__*/React.createElement(Checkbox, {
      value: option.value,
      key: option.value
    }, option.label));
  })));
  return filterColumns.length > 0 ? /*#__PURE__*/React.createElement("div", {
    className: "".concat(getPrefixCls(), "-tableFilter ").concat(className)
  }, expanded || filterColumns.length <= 1 ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Checkbox.Group, {
    className: "".concat(getPrefixCls(), "-tableFilter-expand-checkbox"),
    value: selectedOptions,
    onChange: onChange
  }, filterOptions.map(function (option) {
    return /*#__PURE__*/React.createElement(Checkbox, {
      value: option.value,
      key: option.value
    }, /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top",
      title: option.label,
      getPopupContainer: function getPopupContainer(triggerNode) {
        return triggerNode.parentNode;
      }
    }, option.label));
  })), /*#__PURE__*/React.createElement(IconFont, {
    type: "icon-shuaxin",
    className: "icon-reset",
    onClick: resetCheckbox
  }), filterColumns.length > 1 && /*#__PURE__*/React.createElement("span", {
    className: "reset",
    onClick: resetCheckbox
  }, "\u91CD\u7F6E")) : /*#__PURE__*/React.createElement(Popover, {
    title: null,
    content: content,
    trigger: "click",
    placement: "bottomRight",
    overlayClassName: "".concat(getPrefixCls(), "-tableFilter-popover-wrap"),
    getPopupContainer: function getPopupContainer(triggerNode) {
      return triggerNode.parentNode;
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: "".concat(getPrefixCls(), "-tableFilter-setting")
  }, /*#__PURE__*/React.createElement(IconFont, {
    type: "icon-biaogeshezhi",
    className: "icon-set"
  }), /*#__PURE__*/React.createElement("span", null, "\u8868\u5355\u8BBE\u7F6E")))) : /*#__PURE__*/React.createElement(React.Fragment, null);
});