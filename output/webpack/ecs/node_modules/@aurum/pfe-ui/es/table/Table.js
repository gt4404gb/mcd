import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import _typeof from "@babel/runtime/helpers/esm/typeof";
import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
var _this = this;
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
import React, { forwardRef, useEffect, useState } from 'react';
import classNames from 'classnames';
import InputNumber from '../input-number';
import { Table as AntdTable, Tooltip } from 'antd';
import { Space, ConfigProvider } from 'antd';
import IconFont from '../common/IconFont';
import Dropdown from '../dropdown';
import Menu from '../menu';
import Popconfirm from '../popconfirm';
import TableAddDeletion from './TableAddDeletion';
import TableFilter from './TableFilter';
var EMPTY_LIST = [];
var Table = /*#__PURE__*/forwardRef(function (props, ref) {
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    isNoPagination = _useState2[0],
    setIsNoPagination = _useState2[1];
  var size = props.size,
    newProps = __rest(props, ["size"]);
  var pagination = props === null || props === void 0 ? void 0 : props.pagination;
  var columns = props.columns,
    _props$expanded = props.expanded,
    expanded = _props$expanded === void 0 ? false : _props$expanded,
    _props$tableKey = props.tableKey,
    tableKey = _props$tableKey === void 0 ? '' : _props$tableKey,
    allFilterColumns = props.allFilterColumns,
    dataSource = props.dataSource,
    _props$type = props.type,
    type = _props$type === void 0 ? 'primary' : _props$type,
    _props$andOne = props.andOne,
    andOne = _props$andOne === void 0 ? false : _props$andOne,
    _props$classsName = props.classsName,
    classsName = _props$classsName === void 0 ? '' : _props$classsName,
    tableCallBack = props.tableCallBack;
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    addActive = _useState4[0],
    setAddActive = _useState4[1]; // 添加input框展示标识
  var _useState5 = useState(1),
    _useState6 = _slicedToArray(_useState5, 2),
    newIndex = _useState6[0],
    setNewIndex = _useState6[1];
  var _useState7 = useState(allFilterColumns || []),
    _useState8 = _slicedToArray(_useState7, 2),
    selectedColumns = _useState8[0],
    setSelectedColumns = _useState8[1];
  var _useState9 = useState(props.tableLayout || ''),
    _useState10 = _slicedToArray(_useState9, 2),
    tableLayout = _useState10[0],
    setTableLayout = _useState10[1];
  var rawData = dataSource || EMPTY_LIST;
  var _useState11 = useState(andOne ? rawData.map(function (e, index) {
      e.index = index + 1;
      return e;
    }) : rawData),
    _useState12 = _slicedToArray(_useState11, 2),
    newDataSource = _useState12[0],
    setNewDataSource = _useState12[1];
  useEffect(function () {
    var _a;
    if (((_a = pagination === null || pagination === void 0 ? void 0 : pagination.position) === null || _a === void 0 ? void 0 : _a.length) === 1 && (pagination === null || pagination === void 0 ? void 0 : pagination.position[0]) === 'none') {
      setIsNoPagination(false);
    }
  }, []);
  useEffect(function () {
    setNewDataSource(andOne ? rawData.map(function (e, index) {
      e.index = index + 1;
      return e;
    }) : rawData);
  }, [dataSource]);
  /** 点击展示/隐藏添加按钮交互 */
  var addAction = function addAction(e) {
    var _a, _b, _c, _d;
    if (((_b = (_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.className) === null || _b === void 0 ? void 0 : _b.includes) && ((_d = (_c = e === null || e === void 0 ? void 0 : e.target) === null || _c === void 0 ? void 0 : _c.className) === null || _d === void 0 ? void 0 : _d.includes('table-add-delete-add-number'))) return;
    setNewIndex(newDataSource === null || newDataSource === void 0 ? void 0 : newDataSource.length);
    setAddActive(!addActive);
    if (addActive) {
      tableCallBack(newDataSource);
    }
  };
  /** 上下滚动行动作 */
  var changeAction = function changeAction(i) {
    if (i < newIndex) {
      setNewDataSource(newDataSource.filter(function (item) {
        return (item === null || item === void 0 ? void 0 : item.index) !== (newDataSource === null || newDataSource === void 0 ? void 0 : newDataSource.length);
      }));
      setNewIndex(newDataSource === null || newDataSource === void 0 ? void 0 : newDataSource.length);
    } else {
      var newData = _extends({}, newDataSource[(newDataSource === null || newDataSource === void 0 ? void 0 : newDataSource.length) - 1]);
      newData.index = (newDataSource === null || newDataSource === void 0 ? void 0 : newDataSource.length) + 1;
      newData.key = newData.index;
      setNewIndex((newDataSource === null || newDataSource === void 0 ? void 0 : newDataSource.length) + 1);
      setNewDataSource([].concat(_toConsumableArray(newDataSource), [newData]));
    }
  };
  /** 点击删除动作 */
  var deleteAction = function deleteAction(key) {
    setAddActive(false);
    var tableDataSource = newDataSource.filter(function (item) {
      return (item === null || item === void 0 ? void 0 : item.index) !== key;
    });
    setNewDataSource(tableDataSource);
    tableCallBack(tableDataSource);
  };
  var colData = columns || EMPTY_LIST;
  var newColums = colData.map(function (col, index) {
    var _a;
    if (col.span) {
      col.width = 48 * col.span;
    }
    if (index === colData.length - 1 && !col.align) {
      col.align = 'right';
    }
    if (col.align) {
      col.className = "table-".concat(col.align);
    }
    if (col.renderAction) {
      col.className = 'column-action-block';
      col.render = function (record, fields, index) {
        var renderActionArr = col.renderAction(record, fields, index);
        var actionNum = 0;
        var actions = [];
        var menuItems = [];
        var iconActionArr = [];
        var textActionArr = [];
        renderActionArr.forEach(function (action, index) {
          if (action.iconName) {
            var RenderActionEle = getRenderActionEle(action);
            iconActionArr.push(RenderActionEle);
          }
        });
        renderActionArr.forEach(function (action, index) {
          if (!action.iconName) {
            var RenderActionEle = getRenderActionEle(action);
            if (actionNum < 4 - iconActionArr.length) {
              actionNum += action.name.length / 2;
              actions.push(RenderActionEle);
            } else {
              menuItems.push({
                key: index,
                label: RenderActionEle
              });
            }
          }
        });
        actions = actions.concat(iconActionArr);
        if (menuItems.length > 0) {
          var menu = /*#__PURE__*/React.createElement(Menu, {
            items: menuItems
          });
          var dropdownEle = /*#__PURE__*/React.createElement(Dropdown, {
            key: "more-action",
            overlay: menu,
            placement: 'bottom'
          }, /*#__PURE__*/React.createElement(IconFont, {
            type: "icon-gengduo_shu",
            className: "font-icon"
          }));
          actions.push(dropdownEle);
        }
        var colData = columns || EMPTY_LIST;
        if (index === (colData === null || colData === void 0 ? void 0 : colData.length) - 1) {
          andOne && actions.push( /*#__PURE__*/React.createElement(TableAddDeletion, {
            key: fields === null || fields === void 0 ? void 0 : fields.index,
            deleteAction: deleteAction,
            subscript: (fields === null || fields === void 0 ? void 0 : fields.index) || 0,
            subscriptLast: newDataSource === null || newDataSource === void 0 ? void 0 : newDataSource.length
          }));
        }
        return /*#__PURE__*/React.createElement(Space, {
          wrap: true
        }, actions);
      };
    } else {
      var _colData = columns || EMPTY_LIST;
      if (index === (_colData === null || _colData === void 0 ? void 0 : _colData.length) - 1) {
        var render = null;
        var newRenderFc = null;
        if (typeof col.render === 'function') newRenderFc = col.render;
        col.render = function (record, fields, index) {
          var _a;
          if (typeof newRenderFc === 'function') {
            render = newRenderFc(record, fields, index);
          }
          var lastActions = [];
          var content = '';
          if (col.ellipsisLine && col.ellipsisLine > 0 || col.ellipsis) {
            if (col.ellipsis) {
              if (((_a = col.ellipsis) === null || _a === void 0 ? void 0 : _a.showTitle) === false) col.ellipsisHideTitle = true;
              col.ellipsisLine = 1;
              delete col.ellipsis;
            }
            if (render) {
              if (Array.isArray(render)) {
                content = render;
              } else {
                content = renderEllipsisLine(render, col);
              }
            } else {
              content = renderDefaultEllipsisLine(record, col);
            }
            lastActions.push(content);
          } else {
            if (typeof record === 'string' || typeof record === 'number' || record === null) {
              content = record === 0 ? record : record || '/';
            }
            if (render) {
              lastActions.push(render);
            } else {
              lastActions.push(content);
            }
          }
          andOne && lastActions.push( /*#__PURE__*/React.createElement(TableAddDeletion, {
            key: fields === null || fields === void 0 ? void 0 : fields.index,
            deleteAction: deleteAction,
            subscript: (fields === null || fields === void 0 ? void 0 : fields.index) || 0,
            subscriptLast: newDataSource === null || newDataSource === void 0 ? void 0 : newDataSource.length
          }));
          return lastActions;
        };
      } else if (col.ellipsisLine && col.ellipsisLine > 0 || col.ellipsis) {
        if (col.ellipsis) {
          if (((_a = col.ellipsis) === null || _a === void 0 ? void 0 : _a.showTitle) === false) col.ellipsisHideTitle = true;
          col.ellipsisLine = 1;
          delete col.ellipsis;
        }
        if (typeof col.render === 'function') {
          var oldRender = col.render;
          col.render = function () {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }
            var result = oldRender.apply(_this, args);
            if (['own-ellipsis-span', 'own-ellipsis-tooltip'].includes(result === null || result === void 0 ? void 0 : result.key)) {
              return result;
            } else {
              return renderEllipsisLine(result, col);
            }
          };
        } else {
          col.render = function (record, fields, index) {
            return renderDefaultEllipsisLine(record, col);
          };
        }
      }
      if (!col.render && !props.components) {
        col.render = function (record, fields, index) {
          if (record === 0) {
            return record;
          } else {
            return record || '/';
          }
        };
      }
    }
    if (col.ellipsis || col.ellipsisLine) {
      if (tableLayout !== 'fixed') {
        setTableLayout('fixed');
      }
    }
    return col;
  });
  var renderEllipsisLine = function renderEllipsisLine(content, col) {
    var _a;
    return col.ellipsisHideTitle ? /*#__PURE__*/React.createElement("span", {
      className: "".concat(getPrefixCls(), "-table-ellipsisLine ").concat(getPrefixCls(), "-table-ellipsisLine-").concat(col.ellipsisLine <= 3 ? col.ellipsisLine : 3),
      key: "own-ellipsis-span"
    }, content) : /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top",
      title: ['string', 'number'].includes(_typeof(content)) ? content : ['string', 'number'].includes(_typeof((_a = content.props) === null || _a === void 0 ? void 0 : _a.children)) ? content.props.children : '',
      overlayClassName: "table-tooltip",
      key: "own-ellipsis-tooltip"
    }, /*#__PURE__*/React.createElement("span", {
      className: "".concat(getPrefixCls(), "-table-ellipsisLine ").concat(getPrefixCls(), "-table-ellipsisLine-").concat(col.ellipsisLine <= 3 ? col.ellipsisLine : 3)
    }, content));
  };
  var renderDefaultEllipsisLine = function renderDefaultEllipsisLine(content, col) {
    return col.ellipsisHideTitle ? /*#__PURE__*/React.createElement("span", {
      className: "".concat(getPrefixCls(), "-table-ellipsisLine ").concat(getPrefixCls(), "-table-ellipsisLine-").concat(col.ellipsisLine <= 3 ? col.ellipsisLine : 3),
      key: "own-ellipsis-span"
    }, content === 0 ? content : content || '/') : /*#__PURE__*/React.createElement(Tooltip, {
      placement: "top",
      key: "own-ellipsis-tooltip",
      title: content,
      overlayClassName: "table-tooltip"
    }, /*#__PURE__*/React.createElement("span", {
      className: "".concat(getPrefixCls(), "-table-ellipsisLine ").concat(getPrefixCls(), "-table-ellipsisLine-").concat(col.ellipsisLine <= 3 ? col.ellipsisLine : 3)
    }, content === 0 ? content : content || '/'));
  };
  var getRenderActionEle = function getRenderActionEle(action) {
    if (action.components) {
      return action.components;
    } else {
      if (action.componentType === 'pop') {
        return /*#__PURE__*/React.createElement(Popconfirm, {
          key: action.iconName || action.name,
          title: action.pop.title,
          icon: ""
          // @ts-ignore
          ,
          mcdType: "table",
          onConfirm: action.pop.onConfirm,
          onCancel: action.pop.onCancel,
          okText: action.pop.okText,
          cancelText: action.pop.cancelText
        }, /*#__PURE__*/React.createElement("a", {
          type: "link"
        }, getIcon(action.iconName) || action.name));
      } else {
        return /*#__PURE__*/React.createElement("a", {
          key: action.iconName || action.name,
          type: "link",
          onClick: function onClick() {
            return action.onClickEvent();
          }
        }, getIcon(action.iconName) || action.name);
      }
    }
  };
  var isTreeTable = function isTreeTable() {
    var rawData = dataSource || EMPTY_LIST;
    var hasChildren = rawData.filter(function (item) {
      return item.children && item.children.length > 0;
    });
    return hasChildren.length > 0;
  };
  var preFixCls = "".concat(getPrefixCls(), "-table");
  var className = classNames("".concat(classsName, " ").concat(preFixCls, "-").concat(type), _defineProperty({}, "".concat(getPrefixCls(), "-table-tree-table"), isTreeTable()));
  var _useState13 = useState(newColums),
    _useState14 = _slicedToArray(_useState13, 2),
    combineColumns = _useState14[0],
    setCombineColumns = _useState14[1];
  useEffect(function () {
    var data = tableKey && localStorage.getItem(tableKey);
    if (data) {
      setSelectedColumns(JSON.parse(data));
      setCombineColumns(_toConsumableArray(newColums.filter(function (item) {
        return !(allFilterColumns === null || allFilterColumns === void 0 ? void 0 : allFilterColumns.includes(item === null || item === void 0 ? void 0 : item.dataIndex)) || JSON.parse(data).includes(item === null || item === void 0 ? void 0 : item.dataIndex);
      })));
    } else {
      setSelectedColumns(allFilterColumns);
      setCombineColumns(newColums);
    }
  }, [columns, allFilterColumns]);
  var filterCheckboxClassName = "".concat(getPrefixCls(), "-tableFilter-").concat(type);
  var expandable = _extends(_extends({}, props.expandable), {
    indentSize: 24
  });
  var getIcon = function getIcon(iconName) {
    switch (iconName) {
      case 'delete':
        return /*#__PURE__*/React.createElement(IconFont, {
          type: "icon-guanbi",
          className: "font-icon"
        });
        break;
      case 'edit':
        return /*#__PURE__*/React.createElement(IconFont, {
          type: "icon-bianji",
          className: "font-icon"
        });
      default:
        break;
    }
  };
  var selectedCallback = function selectedCallback(list) {
    setSelectedColumns(list);
    setCombineColumns(_toConsumableArray(newColums.filter(function (item) {
      return !(allFilterColumns === null || allFilterColumns === void 0 ? void 0 : allFilterColumns.includes(item === null || item === void 0 ? void 0 : item.dataIndex)) || list.includes(item === null || item === void 0 ? void 0 : item.dataIndex);
    })));
    localStorage.setItem(tableKey, JSON.stringify(list));
  };
  return /*#__PURE__*/React.createElement("div", {
    style: {
      position: 'relative',
      display: 'flex',
      flexDirection: 'column'
    }
  }, /*#__PURE__*/React.createElement(TableFilter, {
    className: filterCheckboxClassName,
    expanded: expanded,
    allColumns: newColums,
    filterColumns: allFilterColumns,
    selectedColumns: selectedColumns,
    callback: selectedCallback
  }), props.children ? /*#__PURE__*/React.createElement(AntdTable, {
    dataSource: newDataSource
  }, props.children) : /*#__PURE__*/React.createElement(AntdTable, _extends({}, newProps, {
    pagination: pagination ? _extends({
      defaultPageSize: 50,
      position: ['bottomLeft']
    }, pagination) : pagination,
    ref: ref,
    columns: combineColumns,
    expandable: expandable,
    dataSource: newDataSource,
    className: className,
    tableLayout: tableLayout
  })), andOne && /*#__PURE__*/React.createElement("div", {
    className: "table-add-delete-add ".concat(!isNoPagination ? 'table-add-delete-nopagination' : ''),
    onClick: addAction
  }, /*#__PURE__*/React.createElement(IconFont, {
    type: "icon-mulu",
    className: "font-icon table-add-delete-add-icon"
  }), addActive && /*#__PURE__*/React.createElement(InputNumber, {
    min: 1,
    size: "small",
    defaultValue: newIndex,
    className: "table-add-delete-add-number",
    onChange: function onChange(e) {
      changeAction(e);
    }
  })));
});
Table.defaultProps = {
  rowKey: 'key'
};
Table.SELECTION_COLUMN = AntdTable.SELECTION_COLUMN;
Table.EXPAND_COLUMN = AntdTable.EXPAND_COLUMN;
Table.SELECTION_ALL = AntdTable.SELECTION_ALL;
Table.SELECTION_INVERT = AntdTable.SELECTION_INVERT;
Table.SELECTION_NONE = AntdTable.SELECTION_NONE;
Table.Column = AntdTable.Column;
Table.ColumnGroup = AntdTable.ColumnGroup;
Table.Summary = AntdTable.Summary;
export default Table;