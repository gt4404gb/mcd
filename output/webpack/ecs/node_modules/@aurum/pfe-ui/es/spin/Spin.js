import _extends from "@babel/runtime/helpers/esm/extends";
import React from 'react';
import { Spin as AntdSpin, ConfigProvider } from 'antd';
import helper from '../common/helper';
import 'nprogress/nprogress.css'; // 引入进度条样式
import NProgress from 'nprogress';
// Render indicator
var defaultIndicator = null;
var Spin = function Spin(props) {
  var _a;
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var _props$indicator = props.indicator,
    indicator = _props$indicator === void 0 ? /*#__PURE__*/React.createElement("img", {
      src: helper.getImageUrl('/spin/light.png'),
      className: "".concat(getPrefixCls(), "-spin-icon loading-icon")
    }) : _props$indicator;
  if (props.customization === 'hamburger') {
    indicator = /*#__PURE__*/React.createElement("img", {
      src: helper.getImageUrl('/spin/hamburger.gif'),
      className: "".concat(getPrefixCls(), "-spin-global-icon")
    });
  } else if (props.customization === 'doggy') {
    indicator = /*#__PURE__*/React.createElement("img", {
      src: helper.getImageUrl('/spin/doggy.gif'),
      className: "".concat(getPrefixCls(), "-spin-global-icon")
    });
  }
  if (props.theme === 'deep') {
    indicator = /*#__PURE__*/React.createElement("img", {
      src: helper.getImageUrl('/spin/dark.png'),
      className: "".concat(getPrefixCls(), "-spin-icon loading-icon")
    });
  } else if (props.theme === 'light') {
    indicator = /*#__PURE__*/React.createElement("img", {
      src: helper.getImageUrl('/spin/light.png'),
      className: "".concat(getPrefixCls(), "-spin-icon loading-icon")
    });
  }
  return /*#__PURE__*/React.createElement(AntdSpin, _extends({}, props, {
    indicator: indicator,
    className: "".concat((_a = props.className) !== null && _a !== void 0 ? _a : '', " ").concat(props.customization ? "".concat(getPrefixCls(), "-spin-customization") : '', " ").concat(props.theme ? "".concat(getPrefixCls(), "-spin-bg-").concat(props.theme) : '')
  }));
};
Spin.Progress = NProgress;
Spin.setDefaultIndicator = function (indicator) {
  defaultIndicator = indicator;
};
export default Spin;