import _extends from "@babel/runtime/helpers/esm/extends";
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
import React, { cloneElement, useContext } from 'react';
import { ConfigProvider } from 'antd';
import Stepper from './Stepper';
var Steppers = function Steppers(props) {
  var _props$type = props.type,
    type = _props$type === void 0 ? 'default' : _props$type,
    _props$direction = props.direction,
    direction = _props$direction === void 0 ? 'horizontal' : _props$direction,
    _props$className = props.className,
    className = _props$className === void 0 ? '' : _props$className,
    _props$current = props.current,
    current = _props$current === void 0 ? 0 : _props$current,
    children = props.children,
    onChange = props.onChange,
    restProps = __rest(props, ["type", "direction", "className", "current", "children", "onChange"]);
  var _useContext = useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var stepperCls = "".concat(getPrefixCls(), "-steppers");
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(stepperCls, "-").concat(direction, " ").concat(stepperCls, " ").concat(className)
  }, Array.isArray(children) && children.length > 2 && children.map(function (child, index) {
    var stepNumber = index + 1;
    var childProps = _extends(_extends({
      direction: direction,
      type: type,
      totalLength: children.length,
      stepNumber: "".concat(stepNumber + 1),
      stepIndex: stepNumber,
      key: stepNumber,
      onStepClick: onChange && onChange
    }, child.props), restProps);
    if (!child.props.status) {
      if (stepNumber === current) {
        childProps.status = 'process';
      } else if (stepNumber < current) {
        childProps.status = 'success';
      } else {
        childProps.status = 'wait';
      }
    }
    childProps.active = stepNumber === current;
    return /*#__PURE__*/cloneElement(child, childProps);
  }));
};
Steppers.Stepper = Stepper;
export default Steppers;