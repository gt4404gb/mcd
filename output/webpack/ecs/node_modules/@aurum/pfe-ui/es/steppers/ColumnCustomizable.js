import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useContext } from 'react';
import { ConfigProvider } from 'antd';
import IconFont from '../common/IconFont';
import { stepperType } from './interface';
var getHorizontalClass = function getHorizontalClass(success, process, type) {
  var backColor;
  var currentColor;
  var iconColor;
  var descColor;
  var isColumnCustomizable = type === stepperType.columnCustomizable;
  if (isColumnCustomizable) {
    if (success) {
      backColor = 'columnCustomizable-success-bg';
      currentColor = 'columnCustomizable-success-color';
      descColor = 'other-desc-color';
    } else if (process) {
      backColor = 'columnCustomizable-process-bg';
      currentColor = 'columnCustomizable-process-color';
      descColor = 'success-desc-color';
    } else {
      backColor = 'columnCustomizable-other-bg';
      currentColor = 'other-color';
      descColor = 'other-desc-color';
    }
  } else if (success) {
    backColor = 'success-bg-color';
    currentColor = 'success-color';
    iconColor = 'success-border';
    descColor = 'success-desc-color';
  } else if (process) {
    backColor = 'process-bg-color';
    currentColor = 'process-color';
    iconColor = 'process-border';
    descColor = 'process-desc-color';
  } else {
    backColor = 'other-bg-color';
    currentColor = 'other-color';
    iconColor = 'other-border-color';
    descColor = 'other-desc-color';
  }
  return {
    backColor: backColor,
    currentColor: currentColor,
    iconColor: iconColor,
    descColor: descColor,
    isColumnCustomizable: isColumnCustomizable
  };
};
export default (function (props) {
  var stepIndex = props.stepIndex,
    totalLength = props.totalLength,
    success = props.success,
    process = props.process,
    type = props.type,
    renderIconNode = props.renderIconNode,
    titleStyle = props.titleStyle,
    title = props.title;
  var _useContext = useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _useContext.getPrefixCls;
  var stepContainer = "".concat(getPrefixCls(), "-step-column-customizable-prefix-cls");
  var _getHorizontalClass = getHorizontalClass(success, process, type),
    backColor = _getHorizontalClass.backColor,
    currentColor = _getHorizontalClass.currentColor,
    iconColor = _getHorizontalClass.iconColor,
    descColor = _getHorizontalClass.descColor,
    isColumnCustomizable = _getHorizontalClass.isColumnCustomizable;
  var startNode = function startNode() {
    return /*#__PURE__*/React.createElement("div", {
      className: "step-container start  ".concat(isColumnCustomizable ? 'column_container' : 'customizable_container', " ").concat(backColor, " ").concat(currentColor)
    }, !isColumnCustomizable && /*#__PURE__*/React.createElement("div", {
      className: "icon-container"
    }, /*#__PURE__*/React.createElement("div", {
      className: "icon ".concat(iconColor)
    }, renderIconNode())), /*#__PURE__*/React.createElement("div", {
      className: "desc-container ".concat(descColor),
      style: _extends({}, titleStyle)
    }, /*#__PURE__*/React.createElement("span", null, title)), /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-jieduanbeijing",
      className: "right-icon"
    }));
  };
  var centerNode = function centerNode() {
    return /*#__PURE__*/React.createElement("div", {
      className: "step-container ".concat(isColumnCustomizable ? 'column_container' : 'customizable_container', " ").concat(backColor, " ").concat(currentColor)
    }, /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-jindutiaojieduan",
      className: "left-icon"
    }), !isColumnCustomizable && /*#__PURE__*/React.createElement("div", {
      className: "icon-container"
    }, /*#__PURE__*/React.createElement("div", {
      className: "icon ".concat(iconColor)
    }, renderIconNode())), /*#__PURE__*/React.createElement("div", {
      className: "desc-container ".concat(descColor),
      style: _extends({}, titleStyle)
    }, /*#__PURE__*/React.createElement("span", null, title)), /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-jieduanbeijing",
      className: "right-icon"
    }));
  };
  var endNode = function endNode() {
    return /*#__PURE__*/React.createElement("div", {
      className: "step-container ".concat(isColumnCustomizable ? 'column_container' : 'customizable_container', " ").concat(backColor, " ").concat(currentColor)
    }, /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-jindutiaojieduan",
      className: "left-icon"
    }), !isColumnCustomizable && /*#__PURE__*/React.createElement("div", {
      className: "icon-container"
    }, /*#__PURE__*/React.createElement("div", {
      className: "icon ".concat(iconColor)
    }, renderIconNode())), /*#__PURE__*/React.createElement("div", {
      className: "desc-container ".concat(descColor),
      style: _extends({}, titleStyle)
    }, /*#__PURE__*/React.createElement("span", null, title)));
  };
  var renderColumnCustomizableStep = function renderColumnCustomizableStep(index) {
    switch (index) {
      case 1:
        return startNode();
      case totalLength:
        return endNode();
      default:
        return centerNode();
    }
  };
  return /*#__PURE__*/React.createElement("div", {
    className: stepContainer
  }, renderColumnCustomizableStep(stepIndex));
});