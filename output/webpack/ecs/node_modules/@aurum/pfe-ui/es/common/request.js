import axios from 'axios';
import { getToken } from './auth';
// 创建axios实例
var service = axios.create({
  // baseURL
});
var sysValues = ['syslang', 'sysdictionary', 'sysparams'];
// request拦截器
service.interceptors.request.use(function (config) {
  var _token = getToken();
  if (_token) {
    config.headers = config.headers || {};
    config.headers['Authorization'] = _token; // 让每个请求携带自定义token 请根据实际情况自行修改
    config.headers['Content-Type'] = 'application/json';
    config.headers['Cache-Control'] = 'no-cache';
  }
  var signs = localStorage.getItem('sign');
  if (signs) {
    config.headers = config.headers || {};
    config.headers['appkey'] = 'platform';
    config.headers['sign'] = signs;
  }
  return config;
}, function (error) {
  // Do something with request error
  Promise.reject(error);
});
// response拦截器
service.interceptors.response.use(function (response) {
  // removeRepeatUrl(response.config); //在一个ajax响应后再执行一下取消操作，把已经完成的请求从pending中移除
  var res = response.data;
  if (response.headers) {
    if (parseInt(res.code) == 2010) {
      return;
    }
    for (var i in response.headers) {
      if (response.headers.hasOwnProperty(i) && sysValues.includes(i)) {
        localStorage.setItem(i, response.headers[i]);
        return response.data;
      }
    }
  }
  if (parseInt(res.code) !== 2000) {
    if (parseInt(res.code) === 4030) {
      console.log('4030');
      // token expired
    } else if (parseInt(res.code) === 4050) {
      console.log('4050');
      // 没有权限
      return Promise.reject(res);
    }
  }
  return Promise.resolve(response.data);
}, function (error) {
  if (error.toString() !== 'Cancel') {
    console.log('Cancel');
  }
  return Promise.reject(error);
});
export default service;