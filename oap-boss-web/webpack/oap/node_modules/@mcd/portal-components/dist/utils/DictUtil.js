import React from 'react';
import { getALlDictionaryDataList, getDictionaryDataList, getDictionaryDataQuery } from '../api/sysAPI';
import { getLocalItem, setLocalItem, Constants } from './cache';
var datas;
/**
 * 根据字典类型获取字典数据列表，只返回有效的列表数据
 * @param type
 * @returns {*}
 */

export function getDictionaryListByType(type) {
  var application = JSON.parse(window.localStorage.getItem('DICTIONARYLIST'));
  var options = [];

  if (application) {
    options = application[type];
  } else {
    getALlDictionaryDataList().then(function (res) {
      var data = res.data || [];
      var dataMapping = {};
      var dataListMapping = {};
      data.forEach(function (v) {
        var dicData = {
          dictLabelCn: v.dictLabelCn,
          dictLabelEn: v.dictLabelEn,
          dictValue: v.dictValue
        };
        dataMapping[v.dictType + v.dictValue] = dicData; // 根据字典类型返回列表

        if (v.status === '1') {
          dataListMapping[v.dictType] ? dataListMapping[v.dictType].push(dicData) : dataListMapping[v.dictType] = [dicData];
        }
      });
      options = dataListMapping[type];
    });
  }

  return options;
}
;
/**
 * 根据字典类型和字典code返回对应的字典值
 * @param type
 * @param key
 * @returns {*}
 */

export function getDictionaryLabel(type, key) {
  var data = '';
  key = key + '';

  if (key) {
    var LabelList = JSON.parse(window.localStorage.getItem('DICTIONARYLIST'));
    var options = [];

    if (LabelList) {
      options = LabelList[type];

      if (Array.isArray(options)) {
        var _list$;

        var list = options.filter(function (item) {
          return item.dictValue === key;
        });
        data = (_list$ = list[0]) === null || _list$ === void 0 ? void 0 : _list$.dictLabelCn;
      }
    } else {
      var params = {
        dictType: type
      };
      getDictionaryDataList(params).then(function (response) {
        response.data.map(function (item) {
          if (item.dictValue === key) {
            data = item.dictLabelCn;
          }
        });
      })["catch"](function (error) {
        console.log(error);
      });
    }
  }

  return data;
}
;

React.getValueByKey = function (key) {
  var value;
  var data = JSON.parse(getLocalItem(Constants.PARAMETERS));

  if (data) {
    var parameter = data.find(function (item) {
      return item.parameterKey === key;
    });
    value = parameter && parameter.parameterValue;
  }

  return value;
};
/**
 * 获取字典数据列表
 * @param type
 * @returns {*}
 */


export function getDictionary(type) {
  return new Promise(function (resolve, reject) {
    getALlDictionaryDataList().then(function (res) {
      var data = res.data || [];
      var dataMapping = {};
      var dataListMapping = {};
      data.forEach(function (v, k) {
        var dicData = {
          dictLabelCn: v.dictLabelCn,
          dictLabelEn: v.dictLabelEn,
          dictValue: v.dictValue
        };
        dataMapping[v.dictType + v.dictValue] = dicData; // 根据字典类型返回列表

        if (v.status === '1') {
          dataListMapping[v.dictType] ? dataListMapping[v.dictType].push(dicData) : dataListMapping[v.dictType] = [dicData];
        }
      });
      setLocalItem(Constants.DICTIONARY, JSON.stringify(dataMapping));
      setLocalItem(Constants.DICTIONARYLIST, JSON.stringify(dataListMapping));
      var list = {};

      if (type === 'DICTIONARY') {
        list = dataMapping;
      } else {
        list = dataListMapping;
      }

      resolve(list);
    });
  });
}
;

var getChildrenByParentId = function getChildrenByParentId(val, parentId) {
  val.map(function (it) {
    if (it.id == parentId) {
      datas = it.children;
    } else {
      if (!datas) {
        getChildrenByParentId(it.children, parentId);
      }
    }
  });
}; // 通过父级id获取对应字典，默认-1，返回所有


export function getDictById(_ref, cb) {
  var dictType = _ref.dictType,
      _ref$parentId = _ref.parentId,
      parentId = _ref$parentId === void 0 ? -1 : _ref$parentId;
  var options;
  getDictionaryDataQuery({
    dictType: dictType
  }).then(function (res) {
    if (parentId == -1 || !parentId) {
      options = res.data;
    } else {
      getChildrenByParentId(res.data, parentId);
      options = datas;
    }

    cb(options);
  });
}