import axios from "axios";
import { getToken, removeToken } from "./auth";
import { getLangValue } from "./LangUtil";
import message from "../antdApi/message"; // 创建axios实例

var service = axios.create({});
var sysValues = ["syslang", "sysdictionary", "sysparams"]; // request拦截器

service.interceptors.request.use(function (config) {
  var _token = getToken();

  if (_token) {
    config.headers["Authorization"] = _token; // 让每个请求携带自定义token 请根据实际情况自行修改 // change by wen hao

    config.headers["Content-Type"] = "application/json";
    config.headers["Cache-Control"] = "no-cache";
  }

  var signs = localStorage.getItem("sign");

  if (signs) {
    config.headers["appkey"] = "platform";
    config.headers["sign"] = signs;
  }

  return config;
}, function (error) {
  return Promise.reject(error);
}); // respone拦截器

service.interceptors.response.use(function (response) {
  var res = response.data;

  if (response.headers) {
    if (parseInt(res.code) == 2010) {
      return;
    }

    for (var i in response.headers) {
      if (response.headers.hasOwnProperty(i) && sysValues.includes(i)) {
        localStorage.setItem(i, response.headers[i]);
        return response.data;
      }
    }
  }

  if (parseInt(res.code) !== 2000 && res.code !== "SUCCESS") {
    // token过期
    if (parseInt(res.code) === 4030) {
      message.warning({
        content: getLangValue(res.message, res.placeholder),
        key: "4030"
      });
      removeToken();
      window.localStorage.clear();
      window.sessionStorage.clear();
      setTimeout(function () {
        window.location.href = window.location.origin + "/login";
      }, 1000);
    } else if (parseInt(res.code) === 4050) {
      message.warning(getLangValue(res.message, res.placeholder) || "没有权限！");
      return Promise.reject(res);
    } else {
      message.warning(getLangValue(res.message || res.msg, res.placeholder));
      return Promise.reject(res);
    }
  }

  return Promise.resolve(response.data);
}, function (error) {
  return Promise.reject(error);
});
export default service;