import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from "react";
import { Table as Component, Tooltip, message } from "antd";
import { getPageSize } from "../../utils/table";
import { getValueByKey } from "../../utils/common";

var Table = /*#__PURE__*/function (_PureComponent) {
  _inherits(Table, _PureComponent);

  var _super = _createSuper(Table);

  function Table() {
    var _this;

    _classCallCheck(this, Table);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      showQuickJumper: false,
      showSizeChanger: true,
      currentNum: 1,
      maxNum: 10000
    });

    _defineProperty(_assertThisInitialized(_this), "onChange", function (pagination, filters, sorter, extra) {
      if (pagination.current * pagination.pageSize > _this.state.maxNum && Math.abs(_this.state.currentNum - pagination.current) != 1) {
        message.warning($t("portal_use_the_up_and_down_page_button"));
        return;
      }

      _this.setState({
        currentNum: pagination.current
      });

      if (typeof _this.props.onChange === "function") {
        _this.props.onChange(pagination, filters, sorter, extra);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "overwriteProps", function () {
      var _this$state = _this.state,
          showQuickJumper = _this$state.showQuickJumper,
          showSizeChanger = _this$state.showSizeChanger; // 设置每一列ellipsis

      var columns = _this.props.columns.map(function (it) {
        if (it.ellipsis) {
          it.ellipsis = {
            showTitle: false
          };

          if (!it.render) {
            it.render = function (text) {
              return /*#__PURE__*/React.createElement(Tooltip, {
                getPopupContainer: function getPopupContainer(node) {
                  return document.body;
                },
                title: text,
                placement: "topLeft"
              }, text);
            };
          }
        }

        return it;
      }); // 设置分页配置
      // showQuickJumper放在最后，覆盖自定义设置


      var pagination = _objectSpread(_objectSpread({
        showSizeChanger: showSizeChanger,
        defaultPageSize: getPageSize()
      }, _this.props.pagination), {}, {
        showQuickJumper: showQuickJumper
      });

      if (!_this.props.pagination) {
        pagination = false;
      }

      if (pagination && !pagination.showTotal) {
        pagination.showTotal = function (total) {
          return "".concat($t("portal_total"), " ").concat(total, " ").concat($t("portal_item"));
        };
      }

      var sticky; // 如果设置了sticky但是没有offsetHeader，则固定为以下的值

      if (_this.props.sticky === undefined || _this.props.sticky && !_this.props.sticky.offsetHeader) {
        sticky = {
          offsetHeader: getValueByKey("portal.sticky.offsetHeader") || "-11px"
        };
      } else {
        sticky = _this.props.sticky;
      }

      return _objectSpread(_objectSpread({}, _this.props), {}, {
        columns: columns,
        pagination: pagination,
        sticky: sticky
      });
    });

    return _this;
  }

  _createClass(Table, [{
    key: "render",
    value: function render() {
      var props = this.overwriteProps();
      return /*#__PURE__*/React.createElement(Component, _extends({}, props, {
        onChange: this.onChange
      }));
    }
  }]);

  return Table;
}(PureComponent);

Table.displayName = "Table丨表格";
export default Table;