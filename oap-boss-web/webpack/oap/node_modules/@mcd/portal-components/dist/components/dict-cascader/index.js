import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Cascader } from 'antd';
import { checkLocaleIsCn } from '../../utils/common';
import { getDictionaryDataQuery } from "../../api/sysAPI";

var DictCascader = /*#__PURE__*/function (_Component) {
  _inherits(DictCascader, _Component);

  var _super = _createSuper(DictCascader);

  function DictCascader(props) {
    var _this;

    _classCallCheck(this, DictCascader);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "checkChildren", function (val) {
      val.map(function (it) {
        var _it$children;

        if ((_it$children = it.children) !== null && _it$children !== void 0 && _it$children.length) {
          _this.checkChildren(it.children);
        } else {
          delete it.children;
        }
      });
      return val;
    });

    _this.state = {
      options: []
    };
    return _this;
  }

  _createClass(DictCascader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var params = {
        dictType: this.props.type
      };
      getDictionaryDataQuery(params).then(function (res) {
        var options = _this2.checkChildren(res.data);

        _this2.setState({
          options: options
        });
      });
    }
  }, {
    key: "render",
    value: function render() {
      var fieldNames = this.props.fieldNames ? this.props.fieldNames : {
        label: checkLocaleIsCn() ? 'dictLabelCn' : 'dictLabelEn',
        value: 'dictValue'
      };
      var options = this.props.options ? this.props.options : this.state.options;
      var val, deVal;

      if (options.length) {
        val = this.props.value;
        deVal = this.props.defaultValue;
      }

      return /*#__PURE__*/React.createElement(Cascader, _extends({}, this.props, {
        value: val,
        defaultValue: deVal,
        fieldNames: fieldNames,
        options: options
      }));
    }
  }]);

  return DictCascader;
}(Component);

DictCascader.propTypes = {
  /** 字典类型 如：sys\_yes\_no */
  type: PropTypes.string.isRequired,

  /** 选择时填充的值 */
  value: PropTypes.array,

  /** 默认值 */
  defaultValue: PropTypes.array,

  /** 选择后的返回值 */
  onChange: PropTypes.func
};
DictCascader.displayName = 'DictCascader丨字典级联';
export default DictCascader;