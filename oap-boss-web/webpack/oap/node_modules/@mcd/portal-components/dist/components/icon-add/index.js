import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from "react";
import "./index.less";
import { PlusOutlined } from "@ant-design/icons";
import PropTypes from "prop-types";
/**
 *  添加图标
 */

var IconAdd = /*#__PURE__*/function (_React$Component) {
  _inherits(IconAdd, _React$Component);

  var _super = _createSuper(IconAdd);

  function IconAdd(props) {
    var _this;

    _classCallCheck(this, IconAdd);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "onClick", function () {
      _this.props.onClick && _this.props.onClick();
    });

    return _this;
  }
  /**
   *
   *
   */


  _createClass(IconAdd, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      return /*#__PURE__*/React.createElement("span", {
        className: "iconAddWrap ".concat(this.props.className || "")
      }, /*#__PURE__*/React.createElement(PlusOutlined, {
        fill: "white",
        className: "iconAdd",
        onClick: function onClick() {
          return _this2.onClick();
        }
      }));
    }
  }]);

  return IconAdd;
}(React.Component);

export { IconAdd as default };
IconAdd.propTypes = {
  onClick: PropTypes.func
};