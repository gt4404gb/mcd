import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { Upload, Button, message, Modal } from 'antd';
import { PlusOutlined } from "@ant-design/icons";
import { getUploadInfo } from "../..//utils/FileUtil";
import PropTypes from 'prop-types';
import './index.less';

function getBase64(file) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();
    reader.readAsDataURL(file);

    reader.onload = function () {
      return resolve(reader.result);
    };

    reader.onerror = function (error) {
      return reject(error);
    };
  });
}

var ImgUpload = /*#__PURE__*/function (_React$Component) {
  _inherits(ImgUpload, _React$Component);

  var _super = _createSuper(ImgUpload);

  function ImgUpload(props) {
    var _this;

    _classCallCheck(this, ImgUpload);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "validFile", function (file) {
      // 回显的文件不存在lastModified和status，特殊处理
      return file.status === undefined && (_this.validType(file.type) && _this.validSize(file.type) || !file.lastModified);
    });

    _defineProperty(_assertThisInitialized(_this), "validType", function (type) {
      return ['image/jpeg', 'image/jpg', 'image/png', 'image/gif'].indexOf(type) > -1;
    });

    _defineProperty(_assertThisInitialized(_this), "validSize", function (size) {
      return size / 1024 / 1024 < _this.props.size;
    });

    _defineProperty(_assertThisInitialized(_this), "beforeUpload", function (file) {
      var valid = _this.validType(file.type);

      if (!valid) {
        message.warning('只能上传 JPG/PNG/GIF 文件!');
      }

      var size = _this.validSize(file.size);

      if (!size) {
        message.warning('文件大小不能超过' + _this.props.size + 'MB!');
      }

      return valid && size;
    });

    _defineProperty(_assertThisInitialized(_this), "handleCancel", function () {
      return _this.setState({
        previewVisible: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handlePreview", /*#__PURE__*/function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(!file.url && !file.preview)) {
                  _context.next = 4;
                  break;
                }

                _context.next = 3;
                return getBase64(file.originFileObj);

              case 3:
                file.preview = _context.sent;

              case 4:
                _this.setState({
                  previewImage: file.url || file.preview,
                  previewVisible: true,
                  previewTitle: file.name || file.url.substring(file.url.lastIndexOf('/') + 1)
                });

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    _defineProperty(_assertThisInitialized(_this), "onChange", function (info) {
      var fileList = _toConsumableArray(info.fileList);

      var _info$file = info.file,
          status = _info$file.status,
          response = _info$file.response;

      if (status == 'done' && (response === null || response === void 0 ? void 0 : response.code) != 2000 || status == 'error') {
        message.warning({
          content: window.$t ? window.$t('msg_file_upload_failed') : '文件上传失败',
          key: 'msg_file_upload_failed'
        });
      }

      fileList = fileList.filter(function (file) {
        var _file$response;

        return file.status == 'done' && ((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.code) == 2000 || file.status == 'uploading' || _this.validFile(info.file);
      });
      info.fileList = fileList;

      if (typeof _this.props.onChange === 'function') {
        _this.props.onChange(_objectSpread(_objectSpread({}, info), {}, {
          fileList: fileList
        }));
      }

      _this.setState({
        fileList: fileList
      });
    });

    _this.state = {
      previewVisible: false,
      previewImage: '',
      previewTitle: '',
      loading: false,
      fileList: _this.props.fileList || [],
      defaultFileList: _this.props.defaultFileList
    };
    return _this;
  }

  _createClass(ImgUpload, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      this.setState(_objectSpread(_objectSpread({}, this.props), nextProps));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          fileList = _this$state.fileList,
          defaultFileList = _this$state.defaultFileList,
          previewVisible = _this$state.previewVisible,
          previewTitle = _this$state.previewTitle,
          previewImage = _this$state.previewImage;
      var disabled = this.props.limit <= fileList.length && this.props.limit !== '';
      var uploadButton = this.props.listType !== 'picture' ? disabled ? null : /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(PlusOutlined, null)) : /*#__PURE__*/React.createElement(Button, {
        type: "primary",
        disabled: disabled
      }, "\u70B9\u51FB\u4E0A\u4F20");
      var _this$props = this.props,
          appCode = _this$props.appCode,
          fileProp = _this$props.fileProp,
          dirList = _this$props.dirList,
          isRandom = _this$props.isRandom;
      var uploadInfo = getUploadInfo(appCode, fileProp, dirList, isRandom);
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Upload, _extends({}, this.props, uploadInfo, {
        listType: this.props.listType,
        beforeUpload: this.beforeUpload,
        onChange: this.onChange,
        fileList: fileList,
        defaultFileList: defaultFileList,
        onPreview: this.handlePreview
      }), uploadButton), /*#__PURE__*/React.createElement(Modal, {
        visible: previewVisible,
        title: previewTitle,
        footer: null,
        onCancel: this.handleCancel
      }, /*#__PURE__*/React.createElement("img", {
        style: {
          width: '100%'
        },
        src: previewImage,
        alt: "previewImage"
      })));
    }
  }]);

  return ImgUpload;
}(React.Component);

ImgUpload.propTypes = {
  /** 文件夹目录 */
  dirList: PropTypes.string,

  /** 应用编码*/
  appCode: PropTypes.string.isRequired,

  /** 1-公开，0-私密*/
  fileProp: PropTypes.string,

  /** 默认值 */
  defaultFileList: PropTypes.array,

  /** 已经上传的文件列表 */
  fileList: PropTypes.array,

  /** 文件状态改变的回调 */
  onChange: PropTypes.func,

  /** 文件移除的回调 */
  onRemove: PropTypes.func,

  /** 上传的文件数量，默认1 */
  limit: PropTypes.string,

  /** 上传大小 */
  size: PropTypes.string,

  /** 是否生成随机目录，1-生成，0-不生成 */
  isRandom: PropTypes.string,

  /** 上传列表的内建样式，picture 和 picture-card */
  listType: PropTypes.string
};
ImgUpload.defaultProps = {
  fileProp: '1',
  limit: '1',
  dirList: '',
  size: '5',
  isRandom: '1',
  listType: 'picture'
};
ImgUpload.displayName = 'ImgUpload丨图片上传';
export default ImgUpload;