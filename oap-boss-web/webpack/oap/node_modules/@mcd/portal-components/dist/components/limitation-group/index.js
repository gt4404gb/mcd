import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from "react";
import "./index.less";
import { Checkbox, Row, Col } from "antd";
import Input from "../number-input";
import ErrorTip from "../error-tips";
import PropTypes from "prop-types";
/**
 *  限制使用组件
 */

var LimitUse = /*#__PURE__*/function (_React$Component) {
  _inherits(LimitUse, _React$Component);

  var _super = _createSuper(LimitUse);

  function LimitUse(props) {
    var _this;

    _classCallCheck(this, LimitUse);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "initFrequenceList", function () {
      var promotionLimit = _this.state.promotionLimit;
      var promotionLimitValue = _this.props.saveModel.promotionLimitValue;
      var tmpList = promotionLimit.map(function (_) {
        return {
          used: _.checked ? "0" : "1",
          limitQty: _.limitQty,
          limitType: _.limitType
        };
      });
      var msgList = promotionLimit.map(function (_) {
        return {
          vMessage: "",
          cMessage: "",
          limitType: _.limitType
        };
      });

      if (_this.props.saveModel && _this.props.saveModel.promotionLimitValue.length > 0) {
        _this.state.saveModel.enableLimit = _this.props.saveModel.enableLimit;
        promotionLimit = promotionLimit.map(function (p) {
          var savedIndex = promotionLimitValue.findIndex(function (_) {
            return _.limitType == p.limitType;
          });

          if (savedIndex != -1) {
            var savedItem = Object.assign({}, promotionLimitValue[savedIndex]);
            p.checked = savedItem.used == 0 ? true : p.checked;
            p.disabledInput = p.checked;
            p.limitQty = savedItem.limitQty != "" ? savedItem.limitQty : p.limitQty;
          }

          return p;
        });
        promotionLimitValue.forEach(function (pr) {
          var index = tmpList.findIndex(function (_) {
            return _.limitType == pr.limitType;
          });

          if (index != -1) {
            tmpList[index].limitQty = pr.limitQty;
            tmpList[index].used = pr.used;
          }
        });
      }

      _this.state.saveModel.promotionLimitValue = _toConsumableArray(tmpList);
      _this.state.errTipMsg = _toConsumableArray(msgList);
    });

    _defineProperty(_assertThisInitialized(_this), "enableLimitOnChange", function (event) {
      var val = event.target.checked;
      var _this$state = _this.state,
          saveModel = _this$state.saveModel,
          promotionLimit = _this$state.promotionLimit;
      var len = saveModel.promotionLimitValue.length;
      saveModel.promotionLimitValue.splice(0, len);
      promotionLimit = promotionLimit.map(function (_) {
        _.checked = false;
        _.limitQty = "";
        _.disabledInput = false;
        return _;
      });
      saveModel = Object.assign({}, saveModel, {
        enableLimit: val ? "1" : "0"
      });

      _this.setState({
        saveModel: saveModel,
        promotionLimit: promotionLimit
      });
    });

    _defineProperty(_assertThisInitialized(_this), "checkLimitUse", function () {
      return new Promise(function (resolve, reject) {
        var _this$state2 = _this.state,
            errTipMsg = _this$state2.errTipMsg,
            saveModel = _this$state2.saveModel;
        var promotionLimitValue = saveModel.promotionLimitValue;
        var res = true;

        if (saveModel.enableLimit == 1) {
          var noneInput = true;
          promotionLimitValue.forEach(function (_) {
            noneInput = noneInput && _.limitQty == "" && _.used == "1";
          });

          if (noneInput) {
            res = false;

            _this.setState({
              atLeastOneInputTip: "请设置限制内容"
            });
          } else {
            promotionLimitValue.forEach(function (_) {
              var msgIndex = errTipMsg.findIndex(function (m) {
                return m.limitType == _.limitType;
              });

              if (_.limitQty != "" && _.used == 1 || _.limitQty == "" && _.used == 0) {
                errTipMsg[msgIndex].cMessage = "";
                res = true;
              } else {
                errTipMsg[msgIndex].cMessage = "至少设置一项限制内容";
                res = false;
              }
            });

            _this.setState({
              errTipMsg: errTipMsg
            });
          }
        }

        res ? resolve(promotionLimitValue) : reject();
      });
    });

    _defineProperty(_assertThisInitialized(_this), "limitTypeOnCheck", function (event, type) {
      var _this$state3 = _this.state,
          promotionLimit = _this$state3.promotionLimit,
          saveModel = _this$state3.saveModel,
          errTipMsg = _this$state3.errTipMsg;
      var findIndex = promotionLimit.findIndex(function (_) {
        return _.limitType == type;
      });
      var msgIndex = errTipMsg.findIndex(function (_) {
        return _.limitType == type;
      });
      promotionLimit[findIndex].checked = event.target.checked;
      promotionLimit[findIndex].limitQty = "";
      promotionLimit[findIndex].disabledInput = event.target.checked;
      var valArr = promotionLimit.map(function (_) {
        var tmp = {
          limitQty: _.limitQty,
          used: _.checked ? "0" : "1",
          limitType: _.limitType
        };
        return tmp;
      });
      saveModel = Object.assign({}, saveModel, {
        promotionLimitValue: _toConsumableArray(valArr)
      });
      errTipMsg[msgIndex].cMessage = "";

      _this.setState({
        promotionLimit: _toConsumableArray(promotionLimit),
        saveModel: saveModel,
        errTipMsg: errTipMsg,
        atLeastOneInputTip: ""
      });
    });

    _defineProperty(_assertThisInitialized(_this), "limitInputOnChange", function (val, type) {
      var _this$state4 = _this.state,
          promotionLimit = _this$state4.promotionLimit,
          saveModel = _this$state4.saveModel,
          errTipMsg = _this$state4.errTipMsg;
      var findIndex = promotionLimit.findIndex(function (_) {
        return _.limitType == type;
      });
      var msgIndex = errTipMsg.findIndex(function (_) {
        return _.limitType == type;
      });
      promotionLimit[findIndex].limitQty = val == 0 ? 1 : val;
      var valArr = promotionLimit.map(function (_) {
        var tmp = {
          limitQty: _.limitQty,
          used: _.checked ? "0" : "1",
          limitType: _.limitType
        };
        return tmp;
      });
      saveModel = Object.assign({}, saveModel, {
        promotionLimitValue: valArr
      });
      errTipMsg[msgIndex].vMessage = "";

      _this.setState({
        promotionLimit: _toConsumableArray(promotionLimit),
        saveModel: saveModel,
        errTipMsg: errTipMsg,
        atLeastOneInputTip: ""
      });
    });

    _this.props.bind && _this.props.bind(_assertThisInitialized(_this));
    _this.state = {
      limitTitleKey: props.limitTitleKey || "",
      saveModel: {
        enableLimit: "0",
        //是否开启限制次数: 0、不限制，1、限制
        promotionLimitValue: [// { //注解内容，请勿删除
          //   limitQty: '', //限制次数
          //   imitType: '', //限制类型（类型1、每人每天2、每人每周3、每人每月4、总次数）
          //   promotionId: '', //促销ID
          //   used: '', //是否限制频次（0、不限制1、限制）
          // },
        ]
      },
      promotionLimit: props.promotionLimit || [],
      errTipMsg: [],
      atLeastOneInputTip: ""
    };

    _this.initFrequenceList();

    return _this;
  }
  /**
   * 初始化 frequence list
   *
   */


  _createClass(LimitUse, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.saveModel) {}
    }
    /**
     *
     * @param {*} event
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state5 = this.state,
          promotionLimit = _this$state5.promotionLimit,
          saveModel = _this$state5.saveModel,
          errTipMsg = _this$state5.errTipMsg,
          limitTitleKey = _this$state5.limitTitleKey,
          atLeastOneInputTip = _this$state5.atLeastOneInputTip;
      return /*#__PURE__*/React.createElement("div", {
        className: "limitUseWrap"
      }, /*#__PURE__*/React.createElement(Row, {
        gutter: 30,
        style: {
          marginBottom: "10px"
        }
      }, /*#__PURE__*/React.createElement(Col, {
        span: 5
      }, /*#__PURE__*/React.createElement(Checkbox, {
        checked: saveModel.enableLimit == 1,
        onChange: function onChange(e) {
          return _this2.enableLimitOnChange(e);
        }
      }, $t("".concat(limitTitleKey))))), saveModel.enableLimit == 1 ? /*#__PURE__*/React.createElement(ErrorTip, {
        message: atLeastOneInputTip
      }, /*#__PURE__*/React.createElement(Row, {
        style: {
          marginBottom: "10px"
        }
      }, /*#__PURE__*/React.createElement(Col, {
        span: 1
      }), promotionLimit.map(function (_, index) {
        var errMsg = errTipMsg.find(function (m) {
          return m.limitType == _.limitType;
        });
        return /*#__PURE__*/React.createElement(Col, {
          span: 5,
          key: index
        }, /*#__PURE__*/React.createElement(ErrorTip, {
          key: "input_" + index,
          className: "errBottom",
          message: errMsg.vMessage
        }, /*#__PURE__*/React.createElement("div", {
          style: {
            display: "flex",
            alignItems: "center"
          }
        }, _.person, /*#__PURE__*/React.createElement(Input, {
          className: "promotionLimitTimes",
          disabled: _.disabledInput,
          style: {
            width: "80px",
            margin: "0 5px"
          },
          onChange: function onChange(val) {
            return _this2.limitInputOnChange(val, _.limitType);
          },
          value: _.limitQty ? Number(_.limitQty) : _.limitQty
        }), _.unit)), /*#__PURE__*/React.createElement(ErrorTip, {
          key: "check_" + index,
          style: {
            border: "1px solid blue"
          },
          message: errMsg.cMessage
        }, /*#__PURE__*/React.createElement(Checkbox, {
          key: index,
          checked: _.checked,
          onChange: function onChange(e) {
            return _this2.limitTypeOnCheck(e, _.limitType);
          },
          name: "limitType",
          style: {
            height: "22px"
          }
        }, _.title)));
      }))) : /*#__PURE__*/React.createElement("div", null));
    }
  }]);

  return LimitUse;
}(React.Component);

export { LimitUse as default };
LimitUse.propTypes = {
  /** 获取组件函数，返回值为组件的上下文 */
  bind: PropTypes.func,

  /** 组件标题的国际化 key */
  limitTitleKey: PropTypes.string.isRequired
};
LimitUse.displayName = "LimitUse | 限制使用组件";