import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { Checkbox, Button } from 'antd';
import { ReloadOutlined } from '@ant-design/icons';
import PropTypes from 'prop-types';
import { getTableKey } from '../../utils/table';

var TableFilter = /*#__PURE__*/function (_React$Component) {
  _inherits(TableFilter, _React$Component);

  var _super = _createSuper(TableFilter);

  function TableFilter() {
    var _this;

    _classCallCheck(this, TableFilter);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "checkboxChange", function (val) {
      var _this$props = _this.props,
          tableKey = _this$props.tableKey,
          onChange = _this$props.onChange;
      localStorage.setItem(getTableKey(tableKey), JSON.stringify(val));

      if (typeof onChange === 'function') {
        onChange(val);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "checkboxResetColumns", function () {
      var _this$props2 = _this.props,
          tableKey = _this$props2.tableKey,
          resetColumns = _this$props2.resetColumns,
          options = _this$props2.options;
      var data = options.map(function (it) {
        return it.value;
      });
      localStorage.setItem(getTableKey(tableKey), JSON.stringify(data));
      resetColumns();
    });

    return _this;
  }

  _createClass(TableFilter, [{
    key: "render",
    value: function render() {
      var _this$props3 = this.props,
          tableKey = _this$props3.tableKey,
          options = _this$props3.options,
          checkedValue = _this$props3.checkedValue;
      var data = localStorage.getItem(getTableKey(tableKey));
      var value = data ? JSON.parse(data) : checkedValue;
      var defaultValue = options.map(function (it) {
        return it.value;
      });
      return /*#__PURE__*/React.createElement("div", {
        className: "table-filter-wrap"
      }, /*#__PURE__*/React.createElement(Checkbox.Group, {
        onChange: this.checkboxChange,
        defaultValue: defaultValue,
        value: value
      }, options.map(function (it) {
        return /*#__PURE__*/React.createElement(Checkbox, {
          value: it.value,
          key: it.value
        }, it.label);
      }), /*#__PURE__*/React.createElement(Button, {
        onClick: this.checkboxResetColumns,
        icon: /*#__PURE__*/React.createElement(ReloadOutlined, null),
        type: "link",
        size: "small",
        className: "table-filter-btn"
      }, window.$t ? $t('btn_reset') : '重置')));
    }
  }]);

  return TableFilter;
}(React.Component);

TableFilter.propTypes = {
  /** table唯一标识 */
  tableKey: PropTypes.string,

  /** 重置回调  */
  resetColumns: PropTypes.func.isRequired,

  /** 改变筛选项的回调 */
  onChange: PropTypes.func,

  /** 已选择项 */
  checkedValue: PropTypes.array.isRequired,

  /** 所以选择项 */
  options: PropTypes.array.isRequired
};
TableFilter.defaultProps = {
  tableKey: 'table'
};
TableFilter.displayName = 'TableFilter丨表格筛选';
export default TableFilter;