import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import { Cascader as CascaderTemp } from 'antd';
import PropTypes from 'prop-types';
import { getAllRegion } from '../../api/sysAPI';

var CascaderCities = /*#__PURE__*/function (_PureComponent) {
  _inherits(CascaderCities, _PureComponent);

  var _super = _createSuper(CascaderCities);

  function CascaderCities(props) {
    var _this;

    _classCallCheck(this, CascaderCities);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "state", {
      options: []
    });

    _defineProperty(_assertThisInitialized(_this), "componentDidMount", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var isLocal;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              isLocal = _this.setStorage();

              if (!isLocal) {
                _this.fechData();
              }

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    })));

    _defineProperty(_assertThisInitialized(_this), "setStorage", function () {
      var city = localStorage.getItem('city');

      if (city) {
        _this.setState({
          options: JSON.parse(city)
        });

        return true;
      }

      return false;
    });

    _defineProperty(_assertThisInitialized(_this), "fechData", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
      var res, cityData;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return getAllRegion();

            case 2:
              res = _context2.sent;

              if (res.code === '2000') {
                cityData = _this.adapterData(res.data, res.data['000000']);

                _this.setState({
                  options: cityData
                });

                localStorage.setItem('city', JSON.stringify(cityData));
              }

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));

    _defineProperty(_assertThisInitialized(_this), "adapterData", function (arg, arg1) {
      return Object.keys(arg1).map(function (key) {
        var children = arg[key] ? Object.keys(arg[key]).map(function (key1) {
          return {
            label: arg[key] ? arg[key][key1] : '',
            value: key1
          };
        }) : null;
        return {
          label: arg1[key],
          value: key,
          children: children
        };
      });
    });

    return _this;
  }

  _createClass(CascaderCities, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(CascaderTemp, _extends({}, this.props, {
        placeholder: typeof window.$t === 'function' ? $t('cascaderCities') : '请选择',
        options: this.props.options ? this.props.options : this.state.options
      }));
    }
  }]);

  return CascaderCities;
}(PureComponent);

CascaderCities.defaultProps = {
  disabled: false,
  options: undefined,
  style: {}
};
CascaderCities.propTypes = {
  /** 是否禁用 */
  disabled: PropTypes.bool,

  /** 指定选中项， 受控 */
  value: PropTypes.array,

  /** 选择完成后的回调，即省市区变化触发 */
  onChange: PropTypes.func,

  /** 可选项数据源 */
  options: PropTypes.array,

  /** 控件样式 */
  style: PropTypes.object
};
CascaderCities.displayName = 'CascaderCities丨省市级联';
export default CascaderCities;