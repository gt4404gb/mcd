import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from "react";
import { Input, Tooltip } from "antd";

function formatNumber(value) {
  value += "";
  var list = value.split(".");
  var prefix = list[0].charAt(0) === "-" ? "-" : "";
  var num = prefix ? list[0].slice(1) : list[0];
  var result = "";

  while (num.length > 3) {
    result = ",".concat(num.slice(-3)).concat(result);
    num = num.slice(0, num.length - 3);
  }

  if (num) {
    result = num + result;
  }

  return "".concat(prefix).concat(result).concat(list[1] ? ".".concat(list[1]) : "");
}

var Component = /*#__PURE__*/function (_React$Component) {
  _inherits(Component, _React$Component);

  var _super = _createSuper(Component);

  function Component() {
    var _this;

    _classCallCheck(this, Component);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      var value = e.target.value;
      var reg = /^-?\d*(\.\d*)?$/;

      if (!isNaN(value) && reg.test(value) || value === "" || value === "-") {
        _this.props.onChange && _this.props.onChange(value);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "onBlur", function () {
      var _this$props = _this.props,
          value = _this$props.value,
          onBlur = _this$props.onBlur,
          onChange = _this$props.onChange;
      var valueTemp = value;

      if (value !== undefined && (value.charAt(value.length - 1) === "." || value === "-")) {
        valueTemp = value.slice(0, -1);
      }

      if (value !== undefined) {
        onChange(valueTemp.replace(/0*(\d+)/, "$1"));
      }

      if (onBlur) {
        onBlur();
      }
    });

    return _this;
  }

  _createClass(Component, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          value = _this$props2.value,
          placeholder = _this$props2.placeholder,
          forwardedref = _this$props2.forwardedref;
      var placeholderVal = placeholder || (window.$t ? $t("msg_org_number") : "请输入数字");
      var title = value ? /*#__PURE__*/React.createElement("span", {
        className: "numeric-input-title"
      }, value !== "-" ? formatNumber(value) : "-") : placeholderVal;
      return /*#__PURE__*/React.createElement(Tooltip, {
        trigger: ["focus"],
        title: title,
        placement: "topLeft",
        overlayClassName: "numeric-input"
      }, /*#__PURE__*/React.createElement(Input, _extends({
        ref: forwardedref
      }, this.props, {
        onChange: this.onChange,
        onBlur: this.onBlur,
        placeholder: placeholderVal
      })));
    }
  }]);

  return Component;
}(React.Component);

var NumericInput = /*#__PURE__*/React.forwardRef(function (props, ref) {
  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {
    forwardedref: ref
  }));
});
NumericInput.displayName = "NumericInput丨千位符";
export default NumericInput;