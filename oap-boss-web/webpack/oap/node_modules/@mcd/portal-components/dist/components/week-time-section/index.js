import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from "react";
import "./index.less";
import { TimePicker, Checkbox, Button } from "antd";
import moment from "moment";
import IconDel from "../icon-del";
import ErrorTip from "../error-tips";
import { timeFormat } from "../../utils/format";
import * as tools from "../../utils/componentTools";
import PropTypes from "prop-types";
var RangePicker = TimePicker.RangePicker;
/**
 *
 * 每周时间段设置
 *
 */

var WeekTimeSection = /*#__PURE__*/function (_React$Component) {
  _inherits(WeekTimeSection, _React$Component);

  var _super = _createSuper(WeekTimeSection);

  function WeekTimeSection(props) {
    var _this;

    _classCallCheck(this, WeekTimeSection);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "initWeekTimeSection", function () {
      var _this$state = _this.state,
          week = _this$state.week,
          singleRow = _this$state.singleRow,
          errTipArr = _this$state.errTipArr,
          rowErrTip = _this$state.rowErrTip;
      singleRow.title = "时段";
      singleRow.sectionList = _toConsumableArray(week.map(function (_, index) {
        var tmp = {
          key: index + 1,
          startTime: "",
          endTime: ""
        };
        var err = {
          rowKey: "0",
          colKey: index + 1,
          errMsg: ""
        };
        var weekErr = {
          rowKey: -1,
          colKey: index + 1,
          errMsg: ""
        };
        errTipArr.push(err);
        errTipArr.push(weekErr);
        return tmp;
      }));
      rowErrTip.push({
        rowKey: "0",
        errMsg: ""
      });
      var tmpSingleRow = JSON.parse(JSON.stringify(singleRow));
      _this.state.singleRow = Object.assign({}, singleRow);

      _this.state.weekTimeSection.push(tmpSingleRow);

      _this.state.errTipArr = _toConsumableArray(errTipArr);
      _this.state.rowErrTip = _toConsumableArray(rowErrTip);

      _this.constructListToArr();
    });

    _defineProperty(_assertThisInitialized(_this), "constructListToArr", function () {
      if (_this.state.initialValue && _this.state.initialValue.timeSegments.length > 0) {
        var timeSegments = _toConsumableArray(_this.state.initialValue.timeSegments.map(function (_) {
          _.visited = false;
          return _;
        }));

        _this.state.checkedValues = _this.state.checkedValues.filter(function (_) {
          return timeSegments.findIndex(function (t) {
            return t.week == _;
          }) != -1;
        });
        var countWeekDay = [];

        for (var i = 0; i < 7; i++) {
          countWeekDay.push(0);
        }

        timeSegments.forEach(function (_) {
          countWeekDay[_.week - 1] = countWeekDay[_.week - 1] + 1;
        });
        var maxRow = 0;
        countWeekDay.forEach(function (_) {
          _ > maxRow ? maxRow = _ : "";
        });

        for (; maxRow > 1; maxRow--) {
          //初始化时，默认添加一行
          _this.addTimeSection(true);
        }

        var weekTimeSection = _this.state.weekTimeSection;
        weekTimeSection = weekTimeSection.map(function (row) {
          row.sectionList = _toConsumableArray(row.sectionList.map(function (col) {
            var index = timeSegments.findIndex(function (item) {
              return item.week == col.key && !item.visited;
            });

            if (index != -1) {
              col.startTime = timeSegments[index].startTime;
              col.endTime = timeSegments[index].endTime;
              timeSegments[index].visited = true;
            }

            return col;
          }));
          return row;
        });
        _this.state.weekTimeSection = _toConsumableArray(weekTimeSection);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "addTimeSection", function () {
      var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var _this$state2 = _this.state,
          weekTimeSection = _this$state2.weekTimeSection,
          singleRow = _this$state2.singleRow,
          errTipArr = _this$state2.errTipArr,
          rowErrTip = _this$state2.rowErrTip;
      var newSingleRow = JSON.parse(JSON.stringify(singleRow));
      var minKey = weekTimeSection[0].key;
      weekTimeSection.forEach(function (_) {
        if (_.key > minKey) {
          minKey = _.key;
        }
      });
      var tmp = Object.assign({}, newSingleRow, {
        title: "\u65F6\u6BB5".concat(Number(minKey) + 1),
        key: Number(minKey) + 1
      });
      singleRow.sectionList.forEach(function (_, index) {
        var err = {
          rowKey: Number(minKey) + 1,
          colKey: index + 1,
          errMsg: ""
        };
        errTipArr.push(err);
      });
      rowErrTip.push({
        rowKey: Number(minKey) + 1,
        errMsg: ""
      });
      weekTimeSection.push(tmp);

      if (init) {
        _this.state.weekTimeSection = weekTimeSection;
        _this.state.errTipArr = errTipArr;
        _this.state.rowErrTip = rowErrTip;
      } else {
        _this.setState({
          weekTimeSection: weekTimeSection,
          errTipArr: errTipArr,
          rowErrTip: rowErrTip
        });
      }
    });

    _defineProperty(_assertThisInitialized(_this), "checkWeekTimeSection", function () {
      //1、第一行必有一项，2、每列时间段不重复，3、整体检查，必填一项
      return new Promise(function (resolve, reject) {
        var blankWeek = false;
        var colBlank = false;
        var _this$state3 = _this.state,
            checkedValues = _this$state3.checkedValues,
            weekTimeSection = _this$state3.weekTimeSection,
            errTipArr = _this$state3.errTipArr,
            rowErrTip = _this$state3.rowErrTip,
            weekTimeSectionValue = _this$state3.weekTimeSectionValue,
            week = _this$state3.week;
        blankWeek = blankWeek || checkedValues.length == 0;

        if (blankWeek) {
          _this.setState({
            weekErrTip: "至少选择一天"
          });

          reject();
        } //行检测


        weekTimeSection.forEach(function (row) {
          var needRowcheck = true;
          row.sectionList.forEach(function (col) {
            needRowcheck = needRowcheck && col.startTime == "" && col.endTime == ""; //开始结束时间相同校验

            if (col.startTime == col.endTime && col.endTime != "") {
              errTipArr = _toConsumableArray(errTipArr.map(function (_err) {
                if (_err.rowKey == row.key && _err.colKey == col.key) {
                  _err.errMsg = "开始结束时间不得相同";
                }

                return _err;
              }));
            }
          }); //如果一行全为空，and 星期已经选中,则提示填写对应时间

          var tmpRowErrIndex = rowErrTip.findIndex(function (_) {
            return _.rowKey == row.key;
          });

          if (needRowcheck && checkedValues.length > 0) {
            rowErrTip[0].errMsg = row.key == 0 ? "请选择相应时间段" : "";
          }

          if (!needRowcheck && checkedValues.length > 0) {
            rowErrTip[0].errMsg = "";
          }
        }); //列检测

        week.forEach(function (w) {
          var tmpColCheck = false;
          var tmpCol = []; //获取当前列的list

          weekTimeSection.forEach(function (row1) {
            row1.sectionList.forEach(function (col1) {
              if (col1.key == w.value) {
                var tmp = Object.assign({}, col1, {
                  rowKey: row1.key
                });
                tmpCol.push(tmp);
              }
            });
          });
          tmpCol.forEach(function (_) {
            tmpColCheck = tmpColCheck || _.startTime != "" && _.endTime != "";
          }); //如果当前列不全为空，且当前列对应的星期未选中，则提示选择星期的当前日

          if (tmpColCheck && checkedValues.findIndex(function (ch1) {
            return ch1 == w.value;
          }) == -1) {
            var errIndex1 = errTipArr.findIndex(function (_) {
              return _.rowKey == -1 && _.colKey == w.value;
            });
            errTipArr[errIndex1].errMsg = "请选择星期的当前日";
          } //如果当前列不全为空，且当前列对应的星期已经选中，则当前列不提示


          if (tmpColCheck && checkedValues.findIndex(function (ch1) {
            return ch1 == w.value;
          }) != -1) {
            var _errIndex = errTipArr.findIndex(function (_) {
              return _.rowKey == -1 && _.colKey == w.value;
            });

            errTipArr[_errIndex].errMsg = "";
          } //如果当前列全为空，且当前列对应的星期的当前日已经选中，则提示至少选择一个时间段


          if (!tmpColCheck && checkedValues.findIndex(function (ch1) {
            return ch1 == w.value;
          }) != -1) {
            var _errIndex2 = errTipArr.findIndex(function (_) {
              return _.rowKey == -1 && _.colKey == w.value;
            });

            errTipArr = errTipArr.map(function (_) {
              _.errMsg = "";
              return _;
            });
            errTipArr[_errIndex2].errMsg = "至少选择本列一个时间段";
          } //如果当前列全为空，且当前列对应的星期的当前日未选中，则不提示


          if (!tmpColCheck && checkedValues.findIndex(function (ch1) {
            return ch1 == w.value;
          }) == -1) {
            var _errIndex3 = errTipArr.findIndex(function (_) {
              return _.rowKey == -1 && _.colKey == w.value;
            });

            errTipArr[_errIndex3].errMsg = "";
          } //列时间段重叠检查


          var tmpCol0 = [].concat(tmpCol);
          tmpCol.forEach(function (t) {
            var dupIndex = tmpCol0.findIndex(function (tt) {
              return t.rowKey != tt.rowKey && t.startTime != "" && (t.startTime >= tt.startTime && t.startTime < tt.endTime || t.endTime >= tt.startTime && t.endTime < tt.endTime || t.startTime == tt.startTime && t.endTime == tt.endTime);
            });

            if (dupIndex != -1) {
              var dupstamp = new Date().getTime();
              var index1 = errTipArr.findIndex(function (err) {
                return err.rowKey == t.rowKey && err.colKey == t.key;
              });
              var index2 = errTipArr.findIndex(function (err) {
                return err.rowKey == tmpCol0[dupIndex].rowKey && err.colKey == t.key;
              });
              errTipArr[index1].errMsg = "本列重叠时间段";
              errTipArr[index2].errMsg = "本列重叠时间段";
              errTipArr[index1].dupTag = dupstamp;
              errTipArr[index2].dupTag = dupstamp;
            }
          });
        }); //是否全部检验通过

        errTipArr.forEach(function (_) {
          colBlank = colBlank || _.errMsg != "";
        });
        rowErrTip.forEach(function (_) {
          colBlank = colBlank || _.errMsg != "";
        });

        if (colBlank) {
          _this.setState({
            errTipArr: errTipArr,
            rowErrTip: rowErrTip
          }, function () {
            return reject();
          });
        } else {
          //如果符号要求，生成一维数组
          weekTimeSectionValue = _toConsumableArray(_this.getWeekTimeSectionValue(weekTimeSection, checkedValues));

          _this.setState({
            weekTimeSectionValue: weekTimeSectionValue
          }, function () {
            return resolve();
          });
        }
      });
    });

    _defineProperty(_assertThisInitialized(_this), "getWeekTimeSectionValue", function (weekTimeSection, checkedValues) {
      var weekTimeSectionValue = [];
      weekTimeSection.forEach(function (row) {
        var sectionList = row.sectionList;
        sectionList.forEach(function (col) {
          var tmp = {
            startTime: col.startTime,
            endTime: col.endTime,
            week: checkedValues.findIndex(function (ch) {
              return ch == col.key;
            }) != -1 ? col.key : ""
          };

          if (col.startTime != "" && col.endTime != "") {
            weekTimeSectionValue.push(tmp);
          }
        });
      });
      return weekTimeSectionValue;
    });

    _defineProperty(_assertThisInitialized(_this), "weekCheckOnChange", function (checkedValues) {
      var _this$state4 = _this.state,
          errTipArr = _this$state4.errTipArr,
          weekTimeSection = _this$state4.weekTimeSection,
          weekErrTip = _this$state4.weekErrTip;
      weekErrTip = checkedValues.length > 0 ? "" : weekErrTip;
      errTipArr = errTipArr.map(function (_) {
        if (checkedValues.findIndex(function (cv) {
          return cv == _.colKey;
        }) == -1) {
          _.errMsg = "";
        }

        return _;
      });

      _this.setState({
        checkedValues: checkedValues,
        errTipArr: errTipArr,
        weekErrTip: weekErrTip
      }, function () {
        var weekTimeSectionValue = _toConsumableArray(_this.getWeekTimeSectionValue(weekTimeSection, checkedValues));

        _this.props.onChange && _this.props.onChange(weekTimeSectionValue);
      });
    });

    _defineProperty(_assertThisInitialized(_this), "delSection", function (row) {
      var _this$state5 = _this.state,
          weekTimeSection = _this$state5.weekTimeSection,
          errTipArr = _this$state5.errTipArr,
          rowErrTip = _this$state5.rowErrTip;
      weekTimeSection = weekTimeSection.filter(function (_) {
        return _.key != row.key;
      });
      errTipArr = errTipArr.filter(function (_) {
        return _.rowKey != row.key;
      });
      rowErrTip = rowErrTip.filter(function (_) {
        return _.rowKey != row.key;
      });

      _this.setState({
        weekTimeSection: JSON.parse(JSON.stringify(weekTimeSection)),
        errTipArr: errTipArr,
        rowErrTip: rowErrTip
      });

      _this.props.onDelete && _this.props.onDelete(row);
    });

    _defineProperty(_assertThisInitialized(_this), "timeOnChange", function (value, row, col) {
      var _this$state6 = _this.state,
          errTipArr = _this$state6.errTipArr,
          weekTimeSection = _this$state6.weekTimeSection,
          rowErrTip = _this$state6.rowErrTip,
          checkedValues = _this$state6.checkedValues;
      var timeIndex = errTipArr.findIndex(function (_) {
        return _.rowKey == row.key && _.colKey == col.key;
      });
      var rowIndex = rowErrTip.findIndex(function (_) {
        return _.rowKey == row.key;
      });
      var weekIndex = errTipArr.findIndex(function (_) {
        return _.rowKey == -1 && _.colKey == col.key;
      });

      if (rowIndex != -1) {
        rowErrTip[rowIndex].errMsg = "";
      }

      if (timeIndex != -1) {
        var dupIndex = errTipArr[timeIndex].dupTag;
        errTipArr[timeIndex].errMsg = "";
        errTipArr[weekIndex].errMsg = "";
        errTipArr = errTipArr.map(function (d) {
          if (d.dupTag == dupIndex) {
            d.dupTag = "";
            d.errMsg = "";
          }

          return d;
        });
      }

      weekTimeSection = weekTimeSection.map(function (w) {
        if (w.key == row.key) {
          w.sectionList = w.sectionList.map(function (s) {
            if (s.key == col.key) {
              s.startTime = value ? value[0].format(timeFormat) : "";
              s.endTime = value ? value[1].format(timeFormat) : "";
            }

            return s;
          });
        }

        return w;
      });

      _this.setState({
        errTipArr: errTipArr,
        rowErrTip: rowErrTip,
        weekTimeSection: weekTimeSection
      }, function () {
        var weekTimeSectionValue = _toConsumableArray(_this.getWeekTimeSectionValue(weekTimeSection, checkedValues));

        _this.props.onChange && _this.props.onChange(weekTimeSectionValue);
      });
    });

    _this.props.bind && _this.props.bind(_assertThisInitialized(_this));
    _this.state = {
      initialValue: _this.props.saveModel || "",
      showAddBtn: _this.props.showAdd !== undefined ? _this.props.showAdd : true,
      editable: _this.props.editable !== undefined ? _this.props.editable : true,
      local: localStorage.getItem("locale"),
      weekTimeSection: [],
      weekTimeSectionValue: [],
      checkedValues: tools.getWeek().map(function (_) {
        return _.value;
      }) || [],
      errTipArr: [],
      weekErrTip: "",
      rowErrTip: [],
      week: _this.props.week || tools.getWeek().map(function (_) {
        _.checked = true;
        return _;
      }),
      timeFormat: _this.props.timeFormat || "HH:mm:ss",
      dateFormat: _this.props.dateFormat || "YYYY/MM/DD",
      singleRow: {
        title: "",
        key: 0,
        sectionList: []
      }
    };

    _this.initWeekTimeSection();

    return _this;
  }
  /**
   *
   * 初始化周时间段数据
   *
   */


  _createClass(WeekTimeSection, [{
    key: "UNSAFE_componentWillReceiveProps",
    value:
    /**
     * 保存参数到state
     * @param {*} nextProps
     */
    function UNSAFE_componentWillReceiveProps(nextProps) {
      if (nextProps.showAdd != null && !nextProps.showAdd) {
        this.state.showAddBtn = nextProps.showAdd;
      }

      if (nextProps.editable != null) {
        this.state.editable = nextProps.editable;
      }

      if (nextProps.week) {
        this.state.week = nextProps.week;
      }
    }
    /**
     *
     * 添加时间段
     *
     */

  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$state7 = this.state,
          week = _this$state7.week,
          weekTimeSection = _this$state7.weekTimeSection,
          showAddBtn = _this$state7.showAddBtn,
          errTipArr = _this$state7.errTipArr,
          weekErrTip = _this$state7.weekErrTip,
          rowErrTip = _this$state7.rowErrTip,
          editable = _this$state7.editable,
          checkedValues = _this$state7.checkedValues,
          timeFormat = _this$state7.timeFormat;
      var checkArr = errTipArr.filter(function (_) {
        return _.rowKey == -1;
      });
      return /*#__PURE__*/React.createElement("div", {
        className: "weekTimeSectionWrap"
      }, /*#__PURE__*/React.createElement(ErrorTip, {
        message: weekErrTip
      }, /*#__PURE__*/React.createElement(Checkbox.Group, {
        style: {
          width: "100%"
        },
        onChange: this.weekCheckOnChange,
        defaultValue: checkedValues
      }, /*#__PURE__*/React.createElement("div", {
        className: "weekTimeSectionRow"
      }, /*#__PURE__*/React.createElement("li", {
        className: "weekTimeSectionCol colLabel"
      }), week.map(function (w, index) {
        var checkItem = checkArr.find(function (ch) {
          return ch.colKey == w.value;
        });
        return /*#__PURE__*/React.createElement("li", {
          className: "weekTimeSectionCol ",
          key: index
        }, showAddBtn ? /*#__PURE__*/React.createElement(ErrorTip, {
          message: checkItem ? checkItem.errMsg : ""
        }, /*#__PURE__*/React.createElement(Checkbox, {
          value: w.value
        }, w.label)) : w.label);
      }))), weekTimeSection.map(function (row, index) {
        var title = row.title;
        var rowItemErr = errTipArr.filter(function (err) {
          return err.rowKey == row.key;
        });
        var sectionList = row.sectionList.map(function (l) {
          return l;
        });
        var rowErr = rowErrTip.find(function (_) {
          return _.rowKey == row.key;
        });
        return /*#__PURE__*/React.createElement(ErrorTip, {
          message: rowErr ? rowErr.errMsg : "",
          key: "row_err_".concat(index)
        }, /*#__PURE__*/React.createElement("div", {
          className: "weekTimeSectionRow",
          key: "row_".concat(index)
        }, /*#__PURE__*/React.createElement("li", {
          className: "weekTimeSectionCol colLabel"
        }, title), sectionList.map(function (col, sIndex) {
          var errItem = rowItemErr.find(function (c) {
            return c.colKey == col.key;
          });
          var pickerView = /*#__PURE__*/React.createElement(RangePicker, {
            suffixIcon: null,
            allowClear: false,
            disabled: !editable,
            key: "picker_".concat(row.key, "_").concat(col.key),
            defaultValue: [col.startTime ? moment(col.startTime, timeFormat) : "", col.endTime ? moment(col.endTime, timeFormat) : ""],
            format: timeFormat,
            onChange: function onChange(value) {
              return _this2.timeOnChange(value, row, col);
            }
          });
          return /*#__PURE__*/React.createElement("li", {
            className: "weekTimeSectionCol ",
            key: "col_".concat(sIndex)
          }, /*#__PURE__*/React.createElement(ErrorTip, {
            message: errItem.errMsg
          }, editable ? pickerView : _.startTime != "" ? pickerView : ""), sIndex == 6 && index >= 1 && editable ? /*#__PURE__*/React.createElement(IconDel, {
            key: "del_".concat(row.key, "_").concat(col.key),
            className: "weekSectionDel",
            onClick: function onClick() {
              return _this2.delSection(row);
            }
          }) : "");
        })));
      })), showAddBtn === true ? /*#__PURE__*/React.createElement(Button, {
        type: "primary",
        style: {
          marginTop: "12px",
          marginBottom: "12px"
        },
        onClick: function onClick() {
          return _this2.addTimeSection();
        }
      }, "\u6DFB\u52A0\u751F\u6548\u65F6\u6BB5") : "");
    }
  }]);

  return WeekTimeSection;
}(React.Component);

export { WeekTimeSection as default };
WeekTimeSection.propTypes = {
  /** 组件是否可编辑，默认为true */
  editable: PropTypes.bool,

  /** 获取组件方法，返回组件的上下文 */
  bind: PropTypes.func
};