import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from "react";
import "./index.less";
import PropType from "prop-types";

var NumberWrap = /*#__PURE__*/function (_React$Component) {
  _inherits(NumberWrap, _React$Component);

  var _super = _createSuper(NumberWrap);

  function NumberWrap(props) {
    var _this;

    _classCallCheck(this, NumberWrap);

    _this = _super.call(this, props);
    _this.state = {
      pad: props.pad || 3
    };
    return _this;
  }

  _createClass(NumberWrap, [{
    key: "render",
    value: function render() {
      var pad = this.state.pad;
      return /*#__PURE__*/React.createElement("span", {
        style: {
          padding: "0 ".concat(pad, "px")
        }
      }, this.props.children || "");
    }
  }]);

  return NumberWrap;
}(React.Component);

export { NumberWrap as default };
NumberWrap.propType = {
  /** 左右间隔距离，单位px，默认值为 3 */
  pad: PropType.number
};