import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from "react";
import "./index.less";
import PropType from "prop-types";

var ErrorTip = /*#__PURE__*/function (_React$Component) {
  _inherits(ErrorTip, _React$Component);

  var _super = _createSuper(ErrorTip);

  function ErrorTip(props) {
    var _this;

    _classCallCheck(this, ErrorTip);

    _this = _super.call(this, props);
    _this.state = {
      message: "",
      className: _this.props.className || ""
    };
    return _this;
  }

  _createClass(ErrorTip, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      if (typeof nextProps.message != "undefined") {
        this.state.message = nextProps.message;
      }

      if (typeof nextProps.messageKey != "undefined") {
        this.state.message = $t("".concat(nextProps.messageKey));
      }

      if (nextProps.className) {
        this.state.className = nextProps.className;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          message = _this$state.message,
          className = _this$state.className;
      return /*#__PURE__*/React.createElement("div", {
        className: "errorTipWrap ".concat(className || "")
      }, this.props.children || "", message ? /*#__PURE__*/React.createElement("span", {
        className: "errorTipColor"
      }, message) : "");
    }
  }]);

  return ErrorTip;
}(React.Component);

export { ErrorTip as default };
ErrorTip.propTypes = {
  /** 错误消息文本 */
  message: PropType.string,

  /** 错误消息国际化 key */
  messageKey: PropType.string
};