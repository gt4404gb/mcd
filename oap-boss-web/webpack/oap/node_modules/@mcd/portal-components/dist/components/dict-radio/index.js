import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["options"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { Radio } from 'antd';
import { getLocalItem, Constants } from '../../utils/cache';
import { getDictionary } from '../../utils/DictUtil';
import { checkLocaleIsCn } from '../../utils/common';

var DictRadio = /*#__PURE__*/function (_Component) {
  _inherits(DictRadio, _Component);

  var _super = _createSuper(DictRadio);

  function DictRadio(props) {
    var _this;

    _classCallCheck(this, DictRadio);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      if (typeof _this.props.onChange === 'function') {
        _this.props.onChange(e.target.value);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "getList", function (application) {
      var options = application[_this.props.type];

      if (_this.props.valueType === 'bol') {
        options = options.map(function (it) {
          if (it.dictValue === 'true') {
            it.dictValue = true;
          }

          if (it.dictValue === 'false') {
            it.dictValue = false;
          }

          return it;
        });
      }

      _this.setState({
        typeList: options
      });
    });

    _this.state = {
      isLabel: '',
      typeList: [],
      value: _this.props.value,
      defaultValue: _this.props.defaultValue
    };
    return _this;
  }

  _createClass(DictRadio, [{
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      this.setState(_objectSpread(_objectSpread({}, this.props), nextProps));
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var options = this.props.options;

      if (options) {
        this.setState({
          typeList: options
        });
      } else {
        var data = getLocalItem(Constants.DICTIONARYLIST) || {};

        if (data && Object.keys(data).length > 0) {
          this.getList(data);
        } else {
          var request = [getDictionary('DICTIONARYLIST')];
          Promise.all(request).then(function (res) {
            _this2.getList(res[0]);
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          value = _this$state.value,
          defaultValue = _this$state.defaultValue;

      var _this$props = this.props,
          options = _this$props.options,
          props = _objectWithoutProperties(_this$props, _excluded);

      return /*#__PURE__*/React.createElement(Radio.Group, _extends({}, props, {
        defaultValue: defaultValue,
        value: value,
        onChange: this.props.onChange
      }), this.state.typeList.map(function (data) {
        return /*#__PURE__*/React.createElement(Radio, {
          key: data.dictValue,
          value: data.dictValue,
          disabled: data.disabled
        }, checkLocaleIsCn() ? data.dictLabelCn : data.dictLabelEn);
      }));
    }
  }]);

  return DictRadio;
}(Component);

DictRadio.propTypes = {
  /** 字典类型 如：sys\_yes\_no */
  type: PropTypes.string.isRequired,

  /** 选择时填充的值 */
  value: PropTypes.any,

  /** 默认值 */
  defaultValue: PropTypes.string,

  /** 选择后的返回值 */
  onChange: PropTypes.func,

  /** 返回值的类型, 暂时支持string和bol */
  valueType: PropTypes.string,

  /** 选项 */
  options: PropTypes.array
};
DictRadio.defaultProps = {
  valueType: 'string'
};
DictRadio.displayName = 'DictRadio丨字典单选框';
export default DictRadio;