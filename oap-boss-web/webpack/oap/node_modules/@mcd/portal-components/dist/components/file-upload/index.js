import _extends from "@babel/runtime/helpers/extends";
import _toConsumableArray from "@babel/runtime/helpers/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from "react";
import { Upload, Button, message } from "antd";
import PropTypes from "prop-types";
import { getToken } from "../../utils/auth";
import { ApiConstants } from "../../utils/ApiConstants";
var props = {
  name: "file",
  action: "",
  data: {},
  headers: {
    Authorization: getToken()
  }
};

var FileUpload = /*#__PURE__*/function (_React$Component) {
  _inherits(FileUpload, _React$Component);

  var _super = _createSuper(FileUpload);

  function FileUpload(props) {
    var _this;

    _classCallCheck(this, FileUpload);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "onChange", function (info) {
      var fileList = _toConsumableArray(info.fileList);

      var _info$file = info.file,
          status = _info$file.status,
          response = _info$file.response;

      if (status == "done" && (response === null || response === void 0 ? void 0 : response.code) != 2000 || status == "error") {
        if (status == "done" && (response === null || response === void 0 ? void 0 : response.code) != "SUCCESS" || status == "error") {
          var content;

          if (response.code == "BOSAPI01500" || response.code == "FAIL" || response.code == 4000) {
            content = response.message || response.msg;
          } else {
            content = "msg_file_upload_failed";
          }

          message.warning({
            content: window.$t ? window.$t(content) : "文件上传失败",
            key: "msg_file_upload_failed"
          });
        }
      }

      if (status == "done" && (response === null || response === void 0 ? void 0 : response.code) == 2000 || status == "done" && (response === null || response === void 0 ? void 0 : response.code) == "SUCCESS") {
        message.success("上传成功");
      }

      fileList = fileList.filter(function (file) {
        var _file$response, _file$response2;

        return file.status == "done" && ((_file$response = file.response) === null || _file$response === void 0 ? void 0 : _file$response.code) == 2000 || file.status == "done" && ((_file$response2 = file.response) === null || _file$response2 === void 0 ? void 0 : _file$response2.code) == "SUCCESS" || file.status == "uploading" || file.status === undefined;
      }).map(function (it) {
        var _it$response, _it$response$data;

        it.url = it.url ? it.url : (_it$response = it.response) === null || _it$response === void 0 ? void 0 : (_it$response$data = _it$response.data) === null || _it$response$data === void 0 ? void 0 : _it$response$data.fullPath;
        return it;
      });
      info.fileList = fileList;

      if (typeof _this.props.onChange === "function") {
        _this.props.onChange(_objectSpread(_objectSpread({}, info), {}, {
          fileList: fileList
        }));
      }

      if (_this.props.hideFileList) {
        if (status == "uploading") {
          _this.setState({
            fileList: fileList
          });
        }

        if (status == "done") {
          _this.setState({
            fileList: []
          });
        }
      } else {
        _this.setState({
          fileList: fileList
        });
      }
    });

    _this.state = {
      fileList: _this.props.fileList || []
    };
    return _this;
  }

  _createClass(FileUpload, [{
    key: "componentDidMount",
    value: function componentDidMount() {}
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(nextProps) {
      this.setState(_objectSpread(_objectSpread({}, this.props), nextProps));
    }
  }, {
    key: "render",
    value: function render() {
      var fileList = this.state.fileList;
      props.action = ApiConstants.UPLOAD_DOC_URL;
      props.data = {
        appCode: this.props.appCode,
        fileProp: this.props.fileProp,
        dirList: this.props.dirList,
        isRandom: this.props.isRandom
      };
      return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Upload, _extends({}, props, this.props, {
        onChange: this.onChange,
        fileList: fileList
      }), /*#__PURE__*/React.createElement(Button, {
        type: "primary",
        disabled: this.props.limit <= fileList.length && this.props.limit !== ""
      }, "\u70B9\u51FB\u4E0A\u4F20")));
    }
  }]);

  return FileUpload;
}(React.Component);

FileUpload.propTypes = {
  /** 文件夹目录 */
  dirList: PropTypes.string,

  /**  应用编码*/
  appCode: PropTypes.string.isRequired,

  /**  1-公开，0-私密*/
  fileProp: PropTypes.string,

  /** 默认值 */
  defaultFileList: PropTypes.array,

  /** 已经上传的文件列表 */
  fileList: PropTypes.array,

  /** 文件状态改变的回调 */
  onChange: PropTypes.func,

  /** 文件移除的回调 */
  onRemove: PropTypes.func,

  /** 上传的文件数量，默认不限制 */
  limit: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),

  /** 是否生成随机目录 */
  isRandom: PropTypes.string
};
FileUpload.defaultProps = {
  fileProp: "1",
  limit: "",
  dirList: "",
  isRandom: "1"
};
FileUpload.displayName = "FileUpload丨文档上传";
export default FileUpload;