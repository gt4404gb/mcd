import _extends from "@babel/runtime/helpers/extends";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import { Select } from 'antd';
import { getLocalItem, Constants } from '../../utils/cache';
import { getDictionary } from '../../utils/DictUtil';
import { getDictList } from '../../utils/common';

var DictSelect = /*#__PURE__*/function (_PureComponent) {
  _inherits(DictSelect, _PureComponent);

  var _super = _createSuper(DictSelect);

  function DictSelect(props) {
    var _this;

    _classCallCheck(this, DictSelect);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "getList", function (data) {
      _this.setState({
        typeList: getDictList(_this.props.type, data)
      });
    });

    _this.state = {
      typeList: _this.props.multiple ? [] : ''
    };
    return _this;
  }

  _createClass(DictSelect, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (!this.props.options) {
        var data = getLocalItem(Constants.DICTIONARYLIST) || {};

        if (data && Object.keys(data).length > 0) {
          this.getList(data);
        } else {
          getDictionary('DICTIONARYLIST').then(function (res) {
            _this2.getList(res);
          });
        }
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          multiple = _this$props.multiple,
          options = _this$props.options,
          placeholder = _this$props.placeholder,
          filterOption = _this$props.filterOption;

      var filterOptionFn = function filterOptionFn(val, option) {
        return option.value.indexOf(val) > -1 || option.label.indexOf(val) > -1;
      };

      return /*#__PURE__*/React.createElement(Select, _extends({}, this.props, {
        placeholder: window.$t ? $t(placeholder) : '请选择',
        mode: multiple ? 'multiple' : null,
        options: options || this.state.typeList,
        allowClear: true,
        filterOption: filterOption || filterOptionFn
      }));
    }
  }]);

  return DictSelect;
}(PureComponent);

DictSelect.propTypes = {
  /** 是否多选 */
  multiple: PropTypes.bool,

  /** 是否禁用 */
  disabled: PropTypes.bool,

  /** 字典类型 如：sys\_yes\_no*/
  type: PropTypes.string.isRequired,

  /** 国际化placeholder，如：pf_lbl_plz_select */
  placeholder: PropTypes.string,

  /** 默认根据此属性值进行筛选 */
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),

  /** 默认值 */
  defaultValue: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),

  /** 选择后的返回值 */
  onChange: PropTypes.func,

  /** 自定义选项 */
  options: PropTypes.array
};
DictSelect.defaultProps = {
  multiple: false,
  disabled: false,
  placeholder: 'pf_lbl_plz_select'
};
DictSelect.displayName = 'DictSelect丨字典选择器';
export default DictSelect;