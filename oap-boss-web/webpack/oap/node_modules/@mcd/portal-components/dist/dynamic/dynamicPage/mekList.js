import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import { DynamicTable } from '../dynamicItem';

var MekList = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(MekList, _React$PureComponent);

  var _super = _createSuper(MekList);

  function MekList() {
    _classCallCheck(this, MekList);

    return _super.apply(this, arguments);
  }

  _createClass(MekList, [{
    key: "render",
    value: function render() {
      var search = this.props.location.search;
      var arg = search.length > 0 ? location.search.substr(1) : '';
      var map = new Map(arg.split('&').map(function (item) {
        return item.split('=');
      }));
      return /*#__PURE__*/React.createElement(DynamicTable, {
        modelCode: map.get('modelCode'),
        formCode: map.get('formCode')
      });
    }
  }]);

  return MekList;
}(React.PureComponent);

export { MekList as default };