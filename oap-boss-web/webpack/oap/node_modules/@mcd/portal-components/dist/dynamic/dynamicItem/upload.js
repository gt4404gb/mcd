import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React, { useState } from 'react';
import { Upload as UploadTemp, Form, Button } from 'antd';
import { UploadOutlined, PlusOutlined } from '@ant-design/icons';
import { getToken } from '../../utils/auth';

function isPictureCard() {
  return {
    'picture-card': /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(PlusOutlined, null), /*#__PURE__*/React.createElement("div", {
      className: "ant-upload-text"
    }, "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247")),
    'text': /*#__PURE__*/React.createElement(Button, null, /*#__PURE__*/React.createElement(UploadOutlined, null), " \u70B9\u51FB\u4E0A\u4F20\u6587\u4EF6")
  };
}

var onPreview = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(file) {
    var src, image, imgWindow;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            src = file.url;

            if (src) {
              _context.next = 5;
              break;
            }

            _context.next = 4;
            return new Promise(function (resolve) {
              var reader = new FileReader();
              reader.readAsDataURL(file.originFileObj);

              reader.onload = function () {
                return resolve(reader.result);
              };
            });

          case 4:
            src = _context.sent;

          case 5:
            image = new Image();
            image.src = src;
            imgWindow = window.open(src);
            imgWindow.document.write(image.outerHTML);

          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function onPreview(_x) {
    return _ref.apply(this, arguments);
  };
}();

export function Upload(props) {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      fileList = _useState2[0],
      setFileList = _useState2[1];

  var handleOnChange = function handleOnChange(_ref2) {
    var newFileList = _ref2.fileList;
    setFileList(newFileList);
  };

  return /*#__PURE__*/React.createElement(UploadTemp, {
    action: "/api/inner/docmgmt/doc/file/uploadForAPI",
    headers: {
      Authorization: getToken()
    },
    data: {
      appCode: 'porlal',
      fileProp: 1
    },
    listType: props.listType,
    fileList: fileList,
    onChange: handleOnChange,
    onPreview: onPreview
  }, fileList.length >= (props.maxFileNum || 10000) ? null : isPictureCard()[props.listType]);
}