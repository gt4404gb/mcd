import request from "./request";
import { getToken } from "./auth";
var requestCtx = request();
var BASE_API = "/";

function sendHttpRequest(requests) {
  return new Promise(function (resolve, reject) {
    requests.then(function (response) {
      if (response.code === "2000" || response.code === "SUCCESS") {
        resolve(response); // 返回成功
      } else {
        reject(response);
      }
    })["catch"](function (e) {
      reject(e);
    });
  });
}

export function post(url, param, prefixUrl) {
  if (arguments[2] === void 0) {
    prefixUrl = BASE_API;
  }

  return sendHttpRequest(requestCtx({
    url: prefixUrl + url,
    method: "post",
    data: param ? param : ""
  }));
}
export function put(url, param, prefixUrl) {
  if (arguments[2] === void 0) {
    prefixUrl = BASE_API;
  }

  return sendHttpRequest(requestCtx({
    url: prefixUrl + url,
    method: "put",
    data: param ? param : ""
  }));
}
export function deletes(url, param, prefixUrl) {
  if (arguments[2] === void 0) {
    prefixUrl = BASE_API;
  }

  return sendHttpRequest(requestCtx({
    url: prefixUrl + url,
    method: "delete",
    data: param ? param : ""
  }));
}
export function get(url, param) {
  var prefixUrl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BASE_API;

  if (arguments[2] === void 0) {
    prefixUrl = BASE_API;
  }

  return sendHttpRequest(requestCtx({
    url: prefixUrl + url,
    method: "get",
    params: param ? param : ""
  }));
}
/**
 * 发送同步请求
 *
 * @param url 链接
 * @param data 数据
 * @param successCallback 成功
 * @param failCallback 失败
 * @param completeCallback 完成
 */

export function syncGet(url, data, successCallback, failCallback, completeCallback) {
  var xhr = new XMLHttpRequest();

  var _token = getToken();

  xhr.onerror = function (err) {
    if (failCallback) {
      failCallback(err);
    }

    if (completeCallback) {
      completeCallback();
    }
  };

  xhr.onreadystatechange = function () {
    if (xhr.readyState === 4) {
      if (xhr.status >= 200 && xhr.status < 300) {
        if (successCallback) {
          var ret = null;

          try {
            ret = JSON.parse(xhr.responseText);
          } catch (e) {
            ret = xhr.responseText;
          }

          successCallback(ret);
        }
      } else {
        if (failCallback) {
          failCallback();
        }
      }

      if (completeCallback) {
        completeCallback();
      }
    }
  };

  try {
    xhr.open("get", url, false);

    if (_token) {
      xhr.setRequestHeader("Content-Type", "application/json");
      xhr.setRequestHeader("Authorization", _token);
      xhr.setRequestHeader("Cache-Control", "no-cache");
    }

    var signs = localStorage.getItem("sign");

    if (signs) {
      xhr.setRequestHeader("appkey", "platform");
      xhr.setRequestHeader("sign", signs);
    }

    xhr.send(JSON.stringify(data));
  } catch (e) {
    if (failCallback) {
      failCallback(e);
    }
  }
}