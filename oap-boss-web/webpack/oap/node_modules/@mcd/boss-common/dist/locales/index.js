import { getLocale } from './i18nAPI';
import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';
import { getToken } from '../utils/auth';
var lngEnum = {
  en: {
    translation: {}
  },
  cn: {
    translation: {}
  }
};

function setI18nLng(lng, resources) {
  i18n.use(initReactI18next) //init i18next
  .init({
    //引入资源文件
    resources: resources,
    lng: lng,
    //选择默认语言，选择内容为上述配置中的key，即en/zh
    fallbackLng: lng,
    experimentalDecorators: false,
    interpolation: {
      escapeValue: false // not needed for react as it escapes by default

    }
  });
}

function loadLanguageAsync() {
  var I18N_DATA = window.localStorage.getItem('I18N_DATA');

  if (I18N_DATA) {
    var data = JSON.parse(I18N_DATA);
    Object.keys(lngEnum).forEach(function (item) {
      lngEnum[item].translation = data[item].multilang;
    });
    setI18nLng(window.localStorage.getItem('locale') || 'cn', lngEnum);
  } else {
    getLocale().then(function (response) {
      // setLocalItem(Constants.I18N_DATA, response.data.messages);
      Object.keys(lngEnum).forEach(function (item) {
        lngEnum[item].translation = response.data.messages[item].multilang;
      });
      setI18nLng(window.localStorage.getItem('locale') || 'cn', lngEnum);
    });
  }
}

setI18nLng(window.localStorage.getItem('locale') || 'cn', lngEnum);
getToken() && loadLanguageAsync();