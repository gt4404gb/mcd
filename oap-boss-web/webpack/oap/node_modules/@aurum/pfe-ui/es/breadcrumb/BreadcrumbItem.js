import _extends from "@babel/runtime/helpers/esm/extends";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React from 'react';
import IconFont from '../common/IconFont';
import { IconJump } from '@aurum/icons';
import { Dropdown } from 'antd';
import { ConfigProvider } from 'antd';

var BreadcrumbItem = function BreadcrumbItem(props) {
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var _props$prefixCls = props.prefixCls,
      prefixCls = _props$prefixCls === void 0 ? "".concat(getPrefixCls(), "-breadcrumb") : _props$prefixCls,
      _props$separator = props.separator,
      separator = _props$separator === void 0 ? /*#__PURE__*/React.createElement(IconJump, null) : _props$separator,
      children = props.children,
      overlay = props.overlay,
      dropdownProps = props.dropdownProps,
      restProps = __rest(props, ["prefixCls", "separator", "children", "overlay", "dropdownProps"]);
  /** If overlay is have Wrap a Dropdown */


  var renderBreadcrumbNode = function renderBreadcrumbNode(breadcrumbItem) {
    if (overlay) {
      return /*#__PURE__*/React.createElement(Dropdown, _extends({
        overlay: overlay,
        placement: "bottom"
      }, dropdownProps), /*#__PURE__*/React.createElement("span", {
        className: "".concat(prefixCls, "-overlay-link")
      }, breadcrumbItem, /*#__PURE__*/React.createElement(IconFont, {
        type: "icon-mianxingxiangxia"
      })));
    }

    return breadcrumbItem;
  };

  var link;

  if ('href' in restProps) {
    link = /*#__PURE__*/React.createElement("a", _extends({
      className: "".concat(prefixCls, "-link")
    }, restProps), children);
  } else {
    link = /*#__PURE__*/React.createElement("span", _extends({
      className: "".concat(prefixCls, "-link")
    }, restProps), children);
  } // wrap to dropDown


  link = renderBreadcrumbNode(link);

  if (children) {
    return /*#__PURE__*/React.createElement("li", null, link, separator && /*#__PURE__*/React.createElement("span", {
      className: "".concat(prefixCls, "-separator")
    }, separator));
  }

  return null;
};

BreadcrumbItem.__ANT_BREADCRUMB_ITEM = true;
export default BreadcrumbItem;