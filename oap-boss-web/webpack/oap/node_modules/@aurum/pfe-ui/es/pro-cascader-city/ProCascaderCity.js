import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { default as Cascader } from '../cascader';
import { getAllRegion } from '../common/api/dictAPI';

var ProCascaderCity = /*#__PURE__*/function (_React$Component) {
  _inherits(ProCascaderCity, _React$Component);

  var _super = _createSuper(ProCascaderCity);

  function ProCascaderCity() {
    var _this;

    _classCallCheck(this, ProCascaderCity);

    _this = _super.apply(this, arguments);
    _this.state = {
      options: []
    };

    _this.setStorage = function () {
      var city = localStorage.getItem('city');

      if (city) {
        _this.setState({
          options: JSON.parse(city)
        });

        return true;
      }

      return false;
    };

    _this.fetchData = function () {
      getAllRegion().then(function (res) {
        if (res.code === '2000') {
          var cityData = _this.adapterData(res.data, res.data['000000']);

          _this.setState({
            options: cityData
          });

          localStorage.setItem('city', JSON.stringify(cityData));
        }
      })["catch"](function (err) {
        return console.log(err.msg);
      });
    };

    _this.adapterData = function (arg, arg1) {
      return Object.keys(arg1).map(function (key) {
        var children = arg[key] ? Object.keys(arg[key]).map(function (key1) {
          return {
            label: arg[key] ? arg[key][key1] : '',
            value: key1
          };
        }) : null;
        return {
          label: arg1[key],
          value: key,
          children: children
        };
      });
    };

    return _this;
  }

  _createClass(ProCascaderCity, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var isLocal = this.setStorage();

      if (!isLocal) {
        this.fetchData();
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement(Cascader, _extends({
        options: this.state.options || []
      }, this.props));
    }
  }]);

  return ProCascaderCity;
}(React.Component);

export default ProCascaderCity;