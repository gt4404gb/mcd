import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { isEmpty } from 'lodash';
import React, { forwardRef, useState, useEffect } from 'react';
import Select from '../select';
import { getApplicationListAll } from '../common/api/applicationAPI';
var ProApplicationSelect = /*#__PURE__*/forwardRef(function (props, ref) {
  var placeholder = props.placeholder,
      _props$disabled = props.disabled,
      disabled = _props$disabled === void 0 ? false : _props$disabled,
      _props$onChange = props.onChange,
      onChange = _props$onChange === void 0 ? function () {} : _props$onChange,
      _props$multiple = props.multiple,
      multiple = _props$multiple === void 0 ? false : _props$multiple,
      value = props.value;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      typeList = _useState2[0],
      setTypeList = _useState2[1];

  useEffect(function () {
    initAppList();
  }, []);

  var initAppList = function initAppList() {
    if (!isEmpty(props.options)) {
      setTypeList(props.options);
    } else {
      var application = JSON.parse(localStorage.getItem('APPLICATION') || '{}');

      if (!isEmpty(application)) {
        getList(application);
      } else {
        getApplicationListAll().then(function (response) {
          var name_code_mapping = {};
          response.data.forEach(function (v) {
            name_code_mapping[v.appCode] = v.appName;
          });
          localStorage.setItem('APPLICATION', JSON.stringify(name_code_mapping));
          getList(name_code_mapping);
        });
      }
    }
  };

  var getList = function getList(application) {
    var options = [];

    for (var key in application) {
      if (application.hasOwnProperty(key)) {
        options.push({
          label: application[key],
          value: key,
          key: key + application[key]
        });
      }
    }

    setTypeList(options);
  };

  return /*#__PURE__*/React.createElement(Select, {
    placeholder: placeholder || '请选择',
    getPopupContainer: function getPopupContainer(triggerNode) {
      return triggerNode.parentElement;
    },
    options: typeList,
    value: value,
    mode: multiple ? 'multiple' : undefined,
    showSearch: true,
    optionFilterProp: "label",
    disabled: disabled,
    onChange: onChange,
    allowClear: true
  });
});
export default ProApplicationSelect;