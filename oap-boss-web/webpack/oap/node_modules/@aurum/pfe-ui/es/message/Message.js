import _extends from "@babel/runtime/helpers/esm/extends";
import { message } from 'antd';
import React from 'react';
import { IconClose } from '@aurum/icons';
import IconFont from '../common/IconFont';
import { getImageUrl } from '../common/helper';

var api = _extends({}, message);

api.open = function (args) {
  var action = args.action,
      actionType = args.actionType,
      key = args.key;
  var showIcon = /*#__PURE__*/React.createElement(IconFont, {
    className: "before-icon",
    type: "icon-zhuyi"
  });

  if (action === 'close') {
    args.content = /*#__PURE__*/React.createElement("div", null, args.content, /*#__PURE__*/React.createElement(IconClose, {
      onClick: function onClick() {
        if ((actionType === null || actionType === void 0 ? void 0 : actionType.onAction) && typeof (actionType === null || actionType === void 0 ? void 0 : actionType.onAction) === 'function') {
          actionType === null || actionType === void 0 ? void 0 : actionType.onAction();
          message.destroy(key);
        }
      }
    }));
  } else if ((args === null || args === void 0 ? void 0 : args.action) === 'text' && (actionType === null || actionType === void 0 ? void 0 : actionType.text)) {
    args.content = /*#__PURE__*/React.createElement("div", null, args.content, /*#__PURE__*/React.createElement("span", {
      className: "function-text-style",
      onClick: function onClick() {
        if ((actionType === null || actionType === void 0 ? void 0 : actionType.onAction) && typeof (actionType === null || actionType === void 0 ? void 0 : actionType.onAction) === 'function') {
          actionType === null || actionType === void 0 ? void 0 : actionType.onAction();
        }
      }
    }, actionType.text));
  }

  args.icon = showIcon;
  return message.open(args);
};

api.warn = function (rawContent, duration, onClose) {
  return api.common('warn', rawContent, duration, onClose);
};

api.info = function (rawContent, duration, onClose) {
  return api.common('info', rawContent, duration, onClose);
};

api.success = function (rawContent, duration, onClose) {
  return api.common('success', rawContent, duration, onClose);
};

api.error = function (rawContent, duration, onClose) {
  return api.common('error', rawContent, duration, onClose);
};

api.warning = function (rawContent, duration, onClose) {
  return api.common('warning', rawContent, duration, onClose);
};

api.loading = function (rawContent, duration, onClose) {
  return api.common('loading', rawContent, duration, onClose);
};

api.common = function (type, rawContent, duration, onClose) {
  var content = rawContent; // eslint-disable-next-line jsx-a11y/alt-text

  var loadingIcon = /*#__PURE__*/React.createElement("img", {
    className: "loading-icon",
    src: getImageUrl('/spin/light.png')
  });

  if (rawContent.action) {
    content = rawContent;
    var _content = content,
        action = _content.action,
        actionType = _content.actionType,
        key = _content.key;

    if (type === 'loading') {
      content.icon = loadingIcon;
    }

    if (action === 'close') {
      content.content = /*#__PURE__*/React.createElement("div", null, content.content, /*#__PURE__*/React.createElement(IconFont, {
        className: "function-close-x-icon",
        type: "icon-guanbi",
        onClick: function onClick() {
          if ((actionType === null || actionType === void 0 ? void 0 : actionType.onAction) && typeof (actionType === null || actionType === void 0 ? void 0 : actionType.onAction) === 'function') {
            actionType === null || actionType === void 0 ? void 0 : actionType.onAction();
            message.destroy(key);
          }
        }
      }));
    } else if ((content === null || content === void 0 ? void 0 : content.action) === 'text' && (actionType === null || actionType === void 0 ? void 0 : actionType.text)) {
      content.content = /*#__PURE__*/React.createElement("div", null, content.content, /*#__PURE__*/React.createElement("span", {
        className: "function-text-style",
        onClick: function onClick() {
          if ((actionType === null || actionType === void 0 ? void 0 : actionType.onAction) && typeof (actionType === null || actionType === void 0 ? void 0 : actionType.onAction) === 'function') {
            actionType === null || actionType === void 0 ? void 0 : actionType.onAction();
          }
        }
      }, actionType.text));
    }
  } else if (rawContent.content && type === 'loading') {
    content = rawContent;
    content.icon = loadingIcon;
  } else if (typeof rawContent === 'string' && type === 'loading') {
    content = {
      content: /*#__PURE__*/React.createElement("div", null, rawContent),
      icon: loadingIcon,
      duration: duration,
      onClose: onClose
    };
  }

  return message[type](content, duration, onClose);
};

export default api;