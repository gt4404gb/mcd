import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import { forEach, isEmpty } from 'lodash';
import React from 'react';
import { queryAllDict } from '../common/api/dictAPI';

var ProDictCascader = /*#__PURE__*/function (_React$Component) {
  _inherits(ProDictCascader, _React$Component);

  var _super = _createSuper(ProDictCascader);

  function ProDictCascader() {
    var _this;

    _classCallCheck(this, ProDictCascader);

    _this = _super.apply(this, arguments);
    _this.state = {
      name: '',
      className: ''
    };

    _this.getList = function (data) {
      var type = _this.props.type + _this.props.value;
      console.log('type', type);
      console.log('data[type]', data);

      _this.setState({
        name: localStorage.getItem('locale') === 'cn' ? data[type].dictLabelCn : data[type].dictLabelEn
      });
    };

    _this.loopDictData = function (data, dictType, dataMapping, itemData) {
      var tempData = {};
      tempData = {
        dictLabelCn: data.dictLabelCn,
        dictLabelEn: data.dictLabelEn,
        dictValue: data.dictValue
      };

      if (data.status === '1') {
        dataMapping["".concat(dictType).concat(data.dictValue)] = tempData;
        itemData.push(tempData);
      }

      if (!isEmpty(data.children)) {
        forEach(data.children, function (item) {
          _this.loopDictData(item, dictType, dataMapping, itemData);
        });
      }
    };

    return _this;
  }

  _createClass(ProDictCascader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var data = JSON.parse(localStorage.getItem('DICTIONARY') || '{}');

      if (data && Object.keys(data).length > 0) {
        this.getList(data);
      } else {
        queryAllDict().then(function (response) {
          var data = response.data || [];
          var dataMapping = {};
          var dataListMapping = {};
          forEach(data, function (item) {
            var itemData = [];
            forEach(item.dictDataList, function (i) {
              _this2.loopDictData(i, item.dictType, dataMapping, itemData);
            });
            dataListMapping[item.dictType] = itemData;
          });
          localStorage.setItem('DICTIONARY', JSON.stringify(dataMapping));
          localStorage.setItem('DICTIONARYLIST', JSON.stringify(dataListMapping));

          _this2.getList(dataMapping);
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      return /*#__PURE__*/React.createElement("span", {
        className: this.props.className
      }, this.state.name);
    }
  }]);

  return ProDictCascader;
}(React.Component);

export default ProDictCascader;