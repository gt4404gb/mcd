import _extends from "@babel/runtime/helpers/esm/extends";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import React from 'react';
import { default as Cascader } from '../cascader';
import { getDictionaryDataQuery } from '../common/api/dictAPI';

var ProDictCascader = /*#__PURE__*/function (_React$Component) {
  _inherits(ProDictCascader, _React$Component);

  var _super = _createSuper(ProDictCascader);

  function ProDictCascader() {
    var _this;

    _classCallCheck(this, ProDictCascader);

    _this = _super.apply(this, arguments);
    _this.state = {
      options: []
    };

    _this.checkChildren = function (val) {
      val.map(function (it) {
        var _a;

        if ((_a = it.children) === null || _a === void 0 ? void 0 : _a.length) {
          _this.checkChildren(it.children);
        } else {
          delete it.children;
        }
      });
      return val;
    };

    return _this;
  }

  _createClass(ProDictCascader, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var params = {
        dictType: this.props.type
      };

      if (!this.props.options || this.props.options.length === 0) {
        getDictionaryDataQuery(params).then(function (res) {
          var options = _this2.checkChildren(res.data);

          _this2.setState({
            options: options
          });
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var fieldNames = this.props.fieldNames ? this.props.fieldNames : {
        label: localStorage.getItem('locale') === 'cn' ? 'dictLabelCn' : 'dictLabelEn',
        value: 'dictValue'
      };
      var options = this.props.options ? this.props.options : this.state.options;
      var val, deVal;

      if (options.length) {
        val = this.props.value;
        deVal = this.props.defaultValue;
      }

      console.log('options', options);
      return /*#__PURE__*/React.createElement(Cascader, _extends({}, this.props, {
        value: val,
        defaultValue: deVal,
        fieldNames: fieldNames,
        options: options
      }));
    }
  }]);

  return ProDictCascader;
}(React.Component);

export default ProDictCascader;