import _extends from "@babel/runtime/helpers/esm/extends";
import React, { useContext } from 'react';
import { ConfigProvider } from 'antd';
import IconFont from '../common/IconFont';
export default (function (props) {
  var stepIndex = props.stepIndex,
      totalLength = props.totalLength,
      success = props.success,
      wait = props.wait,
      color = props.color,
      errorOrWarn = props.errorOrWarn,
      process = props.process,
      renderIconNode = props.renderIconNode,
      _props$titleStyle = props.titleStyle,
      titleStyle = _props$titleStyle === void 0 ? {} : _props$titleStyle,
      title = props.title;

  var _useContext = useContext(ConfigProvider.ConfigContext),
      getPrefixCls = _useContext.getPrefixCls;

  var stepContainer = "".concat(getPrefixCls(), "-step-horizontal-customizable-prefix-cls");
  var iconColor;
  var stepLineColor;
  var stepLineWeight = 400;
  var processColor = '#999';

  if (success) {
    iconColor = '#4ebe77';
    stepLineColor = '#4ebe77';
  } else if (wait) {
    iconColor = '#eeeeee';
    stepLineColor = '#eeeeee';
  } else if (color) {
    iconColor = color;
    stepLineColor = color;
  } else if (errorOrWarn) {
    iconColor = '#db0007';
    stepLineColor = '#db0007';
  } else if (process) {
    iconColor = '#ffbc0d';
    stepLineColor = '#ffbc0d';
    stepLineWeight = 700;
    processColor = '#222';
  } else {
    iconColor = '#eeeeee';
    stepLineColor = '#eeeeee';
    processColor = '#999';
    stepLineWeight = 400;
  }

  var stepDesc = function stepDesc(customStyle, desc) {
    return /*#__PURE__*/React.createElement("div", {
      className: "step-desc",
      style: _extends({}, customStyle)
    }, /*#__PURE__*/React.createElement("span", null, desc));
  };

  var startNode = function startNode() {
    return /*#__PURE__*/React.createElement("div", {
      className: "step-container start"
    }, /*#__PURE__*/React.createElement("div", {
      className: "step-line start-step-line",
      style: {
        backgroundColor: stepLineColor
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "icon-color icon-container-start"
    }, /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-zuizuojiedian",
      className: "start-icon",
      style: {
        color: iconColor
      }
    }), renderIconNode())), stepDesc(_extends({
      color: processColor,
      fontWeight: stepLineWeight
    }, titleStyle), title));
  };

  var centerNode = function centerNode() {
    return /*#__PURE__*/React.createElement("div", {
      className: "step-container center"
    }, /*#__PURE__*/React.createElement("div", {
      className: "step-line center-step-line",
      style: {
        backgroundColor: stepLineColor
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "icon-color icon-container"
    }, /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-zhongjianjiedian",
      className: "center-icon",
      style: {
        color: iconColor
      }
    }), renderIconNode())), stepDesc(_extends({
      color: processColor,
      fontWeight: stepLineWeight
    }, titleStyle), title));
  };

  var endNode = function endNode() {
    return /*#__PURE__*/React.createElement("div", {
      className: "step-container end"
    }, /*#__PURE__*/React.createElement("div", {
      className: "end-step-line",
      style: {
        backgroundColor: stepLineColor
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: "icon-container-end icon-color"
    }, /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-zuiyoujiedian",
      className: "end-icon",
      style: {
        color: iconColor
      }
    }), renderIconNode())), stepDesc(_extends({
      color: processColor,
      fontWeight: stepLineWeight
    }, titleStyle), title));
  };

  var renderHorizontalStep = function renderHorizontalStep(index) {
    switch (index) {
      case 1:
        return startNode();

      case totalLength:
        return endNode();

      default:
        return centerNode();
    }
  };

  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(stepContainer)
  }, renderHorizontalStep(stepIndex));
});