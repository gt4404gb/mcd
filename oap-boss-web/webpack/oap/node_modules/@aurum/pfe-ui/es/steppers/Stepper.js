import * as React from 'react';
import { ConfigProvider } from 'antd';
import IconFont from '../common/IconFont';
import { getImageUrl } from '../common/helper';
import { stepperDirection, stepperType } from './interface';
import VerticalStepper from './VerticalStepper';
import HorizontalDefault from './HorizontalDefault';
import HorizontalCustomizable from './HorizontalCustomizable';
import ColumnCustomizable from './ColumnCustomizable';

function isString(str) {
  return typeof str === 'string';
}

var Stepper = function Stepper(props) {
  var renderIconNode = function renderIconNode() {
    var stepIndex = props.stepIndex,
        status = props.status,
        icon = props.icon,
        direction = props.direction,
        type = props.type,
        _props$gender = props.gender,
        gender = _props$gender === void 0 ? 0 : _props$gender;
    var iconNode;

    if (icon && isString(icon)) {
      if (type === stepperType["default"] && direction === stepperDirection.horizontal) {
        iconNode = /*#__PURE__*/React.createElement(IconFont, {
          type: "icon-".concat(icon),
          className: "icon-node custom-icon"
        });
      } else if (type === stepperType.customizable && direction === stepperDirection.horizontal) {
        iconNode = /*#__PURE__*/React.createElement(IconFont, {
          type: "icon-".concat(icon),
          className: "icon-node customizable-other"
        });
      } else {
        iconNode = /*#__PURE__*/React.createElement(IconFont, {
          type: "icon-".concat(icon),
          className: "icon-node"
        });
      }
    } else if (type === stepperType["default"] && direction === stepperDirection.vertical) {
      if (gender === 0) {
        iconNode = /*#__PURE__*/React.createElement("img", {
          src: getImageUrl('/steps/man.png'),
          className: "icon-node",
          alt: "\u7537"
        });
      } else {
        iconNode = /*#__PURE__*/React.createElement("img", {
          src: getImageUrl('/steps/woman.png'),
          className: "icon-node",
          alt: "\u5973"
        });
      }
    } else if (status === 'success') {
      if (type === stepperType["default"]) {
        if (direction === stepperDirection.horizontal) {
          iconNode = /*#__PURE__*/React.createElement(IconFont, {
            type: "icon-a-chenggongjiedian3x",
            className: "custom-icon"
          });
        }
      } else if (type === stepperType.customizable) {
        if (direction === stepperDirection.horizontal) {
          iconNode = /*#__PURE__*/React.createElement("span", {
            className: "icon-node customizable-success"
          }, stepIndex);
        }
      } else if (type === stepperType.column) {
        if (direction === stepperDirection.horizontal) {
          iconNode = /*#__PURE__*/React.createElement(IconFont, {
            type: "icon-a-chenggongjiedian3x",
            className: "icon-column-horizontal"
          });
        }
      }
    } else if (status === 'process') {
      if (type === stepperType["default"]) {
        if (direction === stepperDirection.horizontal) {
          iconNode = /*#__PURE__*/React.createElement("div", {
            className: "process icon-default_horizontal"
          }, /*#__PURE__*/React.createElement("span", null, stepIndex));
        }
      } else if (type === stepperType.customizable) {
        if (direction === stepperDirection.horizontal) {
          iconNode = /*#__PURE__*/React.createElement("span", {
            className: "icon-node customizable-process"
          }, stepIndex);
        }
      } else if (type === stepperType.column) {
        if (direction === stepperDirection.horizontal) {
          iconNode = /*#__PURE__*/React.createElement("span", {
            className: "column-process"
          }, stepIndex);
        }
      }
    } else if (status === 'wait') {
      if (direction === stepperDirection.horizontal) {
        if (type === stepperType["default"]) {
          iconNode = /*#__PURE__*/React.createElement("div", {
            className: "wait icon-default_horizontal"
          }, /*#__PURE__*/React.createElement("span", null, stepIndex));
        } else if (type === stepperType.customizable) {
          iconNode = /*#__PURE__*/React.createElement("span", {
            className: "icon-node  customizable-wait"
          }, stepIndex);
        } else if (type === stepperType.column) {
          iconNode = /*#__PURE__*/React.createElement("span", {
            className: "wait"
          }, stepIndex);
        }
      } else {
        iconNode = /*#__PURE__*/React.createElement("span", {
          className: "icon-node wait custom-icon"
        }, stepIndex);
      }
    } else if (type === stepperType.customizable && direction === stepperDirection.horizontal) {
      iconNode = /*#__PURE__*/React.createElement("span", {
        className: "icon-node customizable-other"
      }, stepIndex);
    } else {
      iconNode = /*#__PURE__*/React.createElement("span", {
        className: "icon-node"
      }, stepIndex);
    }

    return iconNode;
  };

  var renderPosition = function renderPosition() {
    var color = props.color,
        type = props.type,
        direction = props.direction,
        stepIndex = props.stepIndex,
        totalLength = props.totalLength,
        status = props.status,
        title = props.title,
        description = props.description,
        titleStyle = props.titleStyle,
        _props$width = props.width,
        width = _props$width === void 0 ? 120 : _props$width;
    var success = status === 'success';
    var process = status === 'process';
    var wait = status === 'wait';
    var errorOrWarn = status === 'error' || status === 'warn';

    if ((type === stepperType["default"] || type === stepperType.customizable) && direction === stepperDirection.vertical) {
      return /*#__PURE__*/React.createElement(VerticalStepper, {
        title: title,
        description: description,
        titleStyle: titleStyle,
        success: success,
        type: type,
        renderIconNode: renderIconNode,
        width: width
      });
    }

    if (type === stepperType["default"] && direction === stepperDirection.horizontal) {
      return /*#__PURE__*/React.createElement(HorizontalDefault, {
        stepIndex: stepIndex,
        renderIconNode: renderIconNode,
        success: success,
        process: process,
        titleStyle: titleStyle,
        title: title,
        totalLength: totalLength
      });
    }

    if (type === stepperType.customizable && direction === stepperDirection.horizontal) {
      return /*#__PURE__*/React.createElement(HorizontalCustomizable, {
        stepIndex: stepIndex,
        totalLength: totalLength,
        success: success,
        wait: wait,
        color: color,
        errorOrWarn: errorOrWarn,
        process: process,
        renderIconNode: renderIconNode,
        titleStyle: titleStyle,
        title: title
      });
    }

    if ((type === stepperType.column || type === stepperType.columnCustomizable) && direction === stepperDirection.horizontal) {
      return /*#__PURE__*/React.createElement(ColumnCustomizable, {
        stepIndex: stepIndex,
        totalLength: totalLength,
        success: success,
        process: process,
        type: type,
        renderIconNode: renderIconNode,
        titleStyle: titleStyle,
        title: title
      });
    }
  };

  var stepClick = function stepClick() {
    var onStepClick = props.onStepClick,
        stepIndex = props.stepIndex;

    if (onStepClick) {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      onStepClick.apply(void 0, args.concat([stepIndex]));
    }
  };

  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var _props$width2 = props.width,
      width = _props$width2 === void 0 ? 120 : _props$width2;
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: "".concat(width, "px")
    },
    onClick: stepClick,
    className: "".concat(getPrefixCls(), "-steppers-stepper")
  }, renderPosition());
};

export default Stepper;