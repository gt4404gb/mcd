import _toConsumableArray from "@babel/runtime/helpers/esm/toConsumableArray";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _createSuper from "@babel/runtime/helpers/esm/createSuper";
import _regeneratorRuntime from "@babel/runtime/regenerator";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import React from 'react';
import { default as Select } from '../select';
import { getAllRegion } from '../common/api/dictAPI';
import { default as Input } from '../input';
var isOnchange = true;

var ProCascaderSelect = /*#__PURE__*/function (_React$Component) {
  _inherits(ProCascaderSelect, _React$Component);

  var _super = _createSuper(ProCascaderSelect);

  function ProCascaderSelect() {
    var _this;

    _classCallCheck(this, ProCascaderSelect);

    _this = _super.apply(this, arguments);
    _this.state = {
      options: {},
      province: [],
      city: [],
      area: [],
      selected: []
    };

    _this.setStorage = function () {
      var province = localStorage.getItem('provinceSelect');

      if (province) {
        _this.setState({
          options: JSON.parse(province)
        });

        _this.adapterpProvinceData(JSON.parse(province));

        return true;
      }

      return false;
    };

    _this.fetchData = function () {
      return __awaiter(_assertThisInitialized(_this), void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var res;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return getAllRegion();

              case 2:
                res = _context.sent;

                if (res.code === '2000') {
                  this.setState({
                    options: res.data
                  });
                  localStorage.setItem('provinceSelect', JSON.stringify(res.data));
                  this.adapterpProvinceData(res.data);
                }

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
    };

    _this.adapterpProvinceData = function (arg) {
      var province = Object.keys(arg['000000']).map(function (key) {
        return {
          label: arg['000000'][key],
          value: key
        };
      });

      _this.setState({
        province: province
      }, function () {
        _this.setCityValue();
      });
    };

    _this.setCityValue = function () {
      if (!_this.props.value || _this.props.value.length === 0) {
        return;
      }

      setTimeout(function () {
        _this.handleCityOnChange(_this.props.value[0], 'city');

        _this.handleCityOnChange(_this.props.value[1], 'area');

        _this.handleAreaOnchange(_this.props.value[2]);
      }, 0);
    };

    _this.selected = function () {
      return {
        'city': function city(value) {
          var selected = [value, undefined, undefined];

          _this.setState({
            selected: selected
          });
        },
        'area': function area(value) {
          var selected = [_toConsumableArray(_this.state.selected)[0], value, undefined];

          _this.setState({
            selected: selected
          });
        }
      };
    };

    _this.handleCityOnChange = function (value, type) {
      var tmp = _this.selected(); // this.selected()[type](value);


      tmp[type](value);

      if (!value) {
        return;
      }

      isOnchange = true;

      _this.setState({
        isOnchange: true
      });

      var arg = {};
      var data = _this.state.options;
      arg[type] = Object.keys(data[value]).map(function (key) {
        return {
          label: data[value][key],
          value: key
        };
      });

      _this.setState(arg, function () {
        return isOnchange = false;
      });
    };

    _this.handleAreaOnchange = function (value) {
      isOnchange = true;

      var selected = _toConsumableArray(_this.state.selected);

      selected[2] = value;

      _this.setState({
        selected: selected
      }, function () {
        return _this.onChange(selected);
      });
    };

    _this.onChange = function (selectedKeys) {
      isOnchange = false;
      var data = _this.state.options;

      if (typeof _this.props.onChange === 'function') {
        var selectedOptions = [{
          label: data['000000'][selectedKeys[0]],
          value: selectedKeys[0]
        }, {
          label: data[selectedKeys[0]][selectedKeys[1]],
          value: selectedKeys[1]
        }, {
          label: data[selectedKeys[1]][selectedKeys[2]],
          value: selectedKeys[2]
        }];

        _this.props.onChange(selectedKeys, selectedOptions);
      }
    };

    return _this;
  }

  _createClass(ProCascaderSelect, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var isLocal = this.setStorage();

      if (!isLocal) {
        this.fetchData();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var selected = this.state.selected || [];
      return /*#__PURE__*/React.createElement("div", {
        style: this.props.style
      }, /*#__PURE__*/React.createElement(Input.Group, {
        compact: true
      }, /*#__PURE__*/React.createElement(Select, {
        onChange: function onChange(value) {
          return _this2.handleCityOnChange(value, 'city');
        },
        placeholder: "\u8BF7\u9009\u62E9\u7701",
        allowClear: true,
        value: selected[0],
        disabled: this.props.disabled,
        style: {
          width: 'calc(100% / 3 - 2px)'
        }
      }, this.state.province.map(function (item) {
        return /*#__PURE__*/React.createElement(Select.Option, {
          key: item.value,
          value: item.value
        }, item.label);
      })), /*#__PURE__*/React.createElement(Select, {
        onChange: function onChange(value) {
          return _this2.handleCityOnChange(value, 'area');
        },
        placeholder: "\u8BF7\u9009\u62E9\u5E02",
        allowClear: true,
        value: selected[1],
        style: {
          width: 'calc(100% / 3 - 2px)'
        },
        disabled: this.props.disabled
      }, this.state.city.map(function (item) {
        return /*#__PURE__*/React.createElement(Select.Option, {
          key: item.value,
          value: item.value
        }, item.label);
      })), /*#__PURE__*/React.createElement(Select, {
        placeholder: "\u8BF7\u9009\u62E9\u533A",
        allowClear: true,
        value: selected[2],
        onChange: this.handleAreaOnchange,
        disabled: this.props.disabled,
        style: {
          width: 'calc(100% / 3 - 2px)',
          minWidth: '100px'
        }
      }, this.state.area.map(function (item) {
        return /*#__PURE__*/React.createElement(Select.Option, {
          key: item.value,
          value: item.value
        }, item.label);
      }))));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(nextProps, prevState) {
      var _a, _b, _c;

      var derivedStates = {};

      if (((_a = nextProps === null || nextProps === void 0 ? void 0 : nextProps.value) === null || _a === void 0 ? void 0 : _a.toString()) !== ((_b = prevState === null || prevState === void 0 ? void 0 : prevState.selected) === null || _b === void 0 ? void 0 : _b.toString()) && !isOnchange) {
        derivedStates = {
          selected: (nextProps === null || nextProps === void 0 ? void 0 : nextProps.value) || [],
          city: ((nextProps === null || nextProps === void 0 ? void 0 : nextProps.value) || [])[0] ? (Object.keys((_c = prevState === null || prevState === void 0 ? void 0 : prevState.options) === null || _c === void 0 ? void 0 : _c[((nextProps === null || nextProps === void 0 ? void 0 : nextProps.value) || [])[0]]) || []).map(function (key) {
            var _a, _b;

            return {
              label: (_b = (_a = prevState === null || prevState === void 0 ? void 0 : prevState.options) === null || _a === void 0 ? void 0 : _a[((nextProps === null || nextProps === void 0 ? void 0 : nextProps.value) || [])[0]]) === null || _b === void 0 ? void 0 : _b[key],
              value: key
            };
          }) : [],
          area: ((nextProps === null || nextProps === void 0 ? void 0 : nextProps.value) || [])[1] ? Object.keys(prevState === null || prevState === void 0 ? void 0 : prevState.options[((nextProps === null || nextProps === void 0 ? void 0 : nextProps.value) || [])[1]]).map(function (key) {
            var _a, _b;

            return {
              label: (_b = (_a = prevState === null || prevState === void 0 ? void 0 : prevState.options) === null || _a === void 0 ? void 0 : _a[((nextProps === null || nextProps === void 0 ? void 0 : nextProps.value) || [])[1]]) === null || _b === void 0 ? void 0 : _b[key],
              value: key
            };
          }) : []
        };
      }

      return derivedStates;
    }
  }]);

  return ProCascaderSelect;
}(React.Component);

export default ProCascaderSelect;