import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";

var __rest = this && this.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

import React, { forwardRef, useState, useEffect } from 'react';
import Radio from '../radio';
import { getDictionary } from '../common/utils/dictUtil';
import { getLocalItem } from '../common/utils/cache';
;
var ProDictRadio = /*#__PURE__*/forwardRef(function (props, ref) {
  var _props$valueType = props.valueType,
      valueType = _props$valueType === void 0 ? 'string' : _props$valueType;

  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      typeList = _useState2[0],
      setTypeList = _useState2[1];

  var options = props.options,
      temProps = __rest(props, ["options"]);

  useEffect(function () {
    initDictList();
  }, []);

  var initDictList = function initDictList() {
    if (props.options) {
      setTypeList(props.options);
    } else {
      var data = getLocalItem('DICTIONARYLIST') || {};

      if (data && Object.keys(data).length > 0) {
        getList(data);
      } else {
        var request = [getDictionary('DICTIONARYLIST')];
        Promise.all(request).then(function (res) {
          getList(res[0]);
        });
      }
    }
  };

  var getList = function getList(application) {
    var options = application[props.type];

    if (valueType === 'bol') {
      options = options.map(function (item) {
        if (item.dictValue === 'true') {
          item.dictValue = true;
        }

        if (item.dictValue === 'false') {
          item.dictValue = false;
        }

        return item;
      });
    }

    setTypeList(options);
  };

  return /*#__PURE__*/React.createElement(Radio.Group, _extends({}, temProps, {
    defaultValue: props.defaultValue,
    value: props.value
  }), typeList.map(function (data) {
    return /*#__PURE__*/React.createElement(Radio, {
      key: data.dictValue,
      value: data.dictValue,
      disabled: data.disabled
    }, localStorage.getItem('locale') === 'cn' ? data.dictLabelCn : data.dictLabelEn);
  }));
});
export default ProDictRadio;