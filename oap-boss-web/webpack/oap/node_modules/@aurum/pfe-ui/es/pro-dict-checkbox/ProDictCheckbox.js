import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import React, { forwardRef, useState, useEffect } from 'react';
import Checkbox from '../checkbox';
import { getDictionary } from '../common/utils/dictUtil';
import { getLocalItem } from '../common/utils/cache';
;
var ProDictCheckbox = /*#__PURE__*/forwardRef(function (props, ref) {
  var _useState = useState([]),
      _useState2 = _slicedToArray(_useState, 2),
      typeList = _useState2[0],
      setTypeList = _useState2[1];

  useEffect(function () {
    initDictList();
  }, []);

  var initDictList = function initDictList() {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      var data, res, arr;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (props.options) {
                _context.next = 12;
                break;
              }

              data = getLocalItem('DICTIONARYLIST') || {};

              if (!(data && Object.keys(data).length > 0)) {
                _context.next = 6;
                break;
              }

              setTypeList(getDictList(props.type, data));
              _context.next = 10;
              break;

            case 6:
              _context.next = 8;
              return getDictionary('DICTIONARYLIST');

            case 8:
              res = _context.sent;
              setTypeList(getDictList(props.type, res));

            case 10:
              _context.next = 15;
              break;

            case 12:
              arr = [];
              props.options.forEach(function (item) {
                arr.push({
                  label: localStorage.getItem('locale') === 'cn' ? item.dictLabelCn : item.dictLabelEn,
                  value: item.dictValue,
                  key: item.dictValue,
                  disabled: item.disabled
                });
              });
              setTypeList(arr);

            case 15:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  };

  var getDictList = function getDictList(type, data) {
    var options = [];

    var _loop = function _loop(key) {
      if (data.hasOwnProperty(key) && key == type) {
        data[key].map(function (item) {
          var dictLabel = localStorage.getItem('locale') === 'cn' ? item.dictLabelCn : item.dictLabelEn;
          options.push({
            label: dictLabel,
            value: item.dictValue,
            key: key + dictLabel
          });
        });
      }
    };

    for (var key in data) {
      _loop(key);
    }

    return options;
  };

  return /*#__PURE__*/React.createElement(Checkbox.Group, _extends({}, props, {
    options: typeList
  }));
});
export default ProDictCheckbox;