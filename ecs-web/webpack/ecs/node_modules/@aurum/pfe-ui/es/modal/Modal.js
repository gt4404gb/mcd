import _extends from "@babel/runtime/helpers/esm/extends";
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
import * as React from 'react';
import { Modal as AntModal } from 'antd';
import { ConfigProvider } from 'antd';
import helper from '../common/helper';
import IconFont from '../common/IconFont';
import Button from '../button';
var PAGEWIDTH = 900;
var NOTICEWIDTH = 320;
var NORMALWIDTH = 530;
var guideTypeLogo = function guideTypeLogo() {
  var guideTypeStatus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'modal-success-logo';
  switch (guideTypeStatus) {
    case 'success':
      return /*#__PURE__*/React.createElement("img", {
        src: helper.getImageUrl('/modal/modal-success-logo.png')
      });
    case 'error':
      return /*#__PURE__*/React.createElement("img", {
        src: helper.getImageUrl('/modal/modal-fail-logo.png')
      });
    default:
      return /*#__PURE__*/React.createElement("img", {
        src: helper.getImageUrl("/modal/".concat(guideTypeStatus, ".png"))
      });
  }
};
var Modal = function Modal(_a) {
  var _a$modalType = _a.modalType,
    modalType = _a$modalType === void 0 ? 'normalType' : _a$modalType,
    guideTypeStatus = _a.guideTypeStatus,
    guideTypeImg = _a.guideTypeImg,
    headerNoLine = _a.headerNoLine,
    rest = __rest(_a, ["modalType", "guideTypeStatus", "guideTypeImg", "headerNoLine"]);
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var antdModalProps = _extends({
    width: modalType === 'pageType' ? PAGEWIDTH : modalType === 'guideType' || modalType === 'noticeType' ? NOTICEWIDTH : NORMALWIDTH,
    centered: true,
    closeIcon: /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-guanbi",
      className: "icon-guanbi"
    }),
    closable: modalType === 'guideType' || modalType === 'noticeType' ? false : true,
    maskStyle: {
      background: 'rgb(0, 0, 0, 0.7)'
    },
    footer: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, _extends({}, rest.okButtonProps, {
      loading: rest.confirmLoading,
      type: rest.okType || 'primary',
      onClick: rest.onOk
    }), rest.okText || '确定'), modalType !== 'guideType' && /*#__PURE__*/React.createElement(Button, _extends({}, rest.cancelButtonProps, {
      onClick: rest.onCancel
    }), rest.cancelText || '取消'))
  }, rest);
  return /*#__PURE__*/React.createElement(AntModal, _extends({}, antdModalProps, {
    className: "".concat(modalType).concat(headerNoLine ? " ".concat(getPrefixCls(), "-modal-header-noline") : '', " ").concat(rest.className || '')
  }), modalType === 'guideType' && /*#__PURE__*/React.createElement("div", {
    className: "".concat(getPrefixCls(), "-modal-top-bg")
  }, guideTypeImg || guideTypeLogo(guideTypeStatus)), antdModalProps.children);
};
var FuncProps = function FuncProps(props) {
  return _extends(_extends({
    centered: true,
    width: NOTICEWIDTH,
    okText: '确定 ',
    maskStyle: {
      background: 'rgb(0, 0, 0, 0.7)'
    }
  }, props), {
    icon: '',
    content: /*#__PURE__*/React.createElement(React.Fragment, null, props.content),
    className: "modal-methods-success ".concat(props.className || '')
  });
};
var emptyImg = function emptyImg(props, defaultImg) {
  var guideTypeStatus = props.guideTypeStatus,
    logoImg = props.logoImg;
  if (logoImg) {
    return logoImg;
  } else if (guideTypeStatus) {
    return guideTypeLogo(guideTypeStatus);
  } else {
    return /*#__PURE__*/React.createElement("img", {
      src: helper.getImageUrl(defaultImg)
    });
  }
};
var success = function success(props) {
  return AntModal.success(_extends(_extends({}, FuncProps(props)), {
    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      className: "modal-content-img"
    }, emptyImg(props, '/modal/modal-success-logo.png')), props.content)
  }));
};
var error = function error(props) {
  return AntModal.error(_extends(_extends({}, FuncProps(props)), {
    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      className: "modal-content-img"
    }, emptyImg(props, '/modal/modal-fail-logo.png')), props.content)
  }));
};
var warning = function warning(props) {
  return AntModal.warning(_extends(_extends({}, FuncProps(props)), {
    content: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
      className: "modal-content-img"
    }, emptyImg(props, '/modal/warning.png')), props.content)
  }));
};
var info = function info(props) {
  var FuncProps = _extends(_extends({
    centered: true,
    width: NOTICEWIDTH,
    closeIcon: /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-guanbi",
      className: "icon-guanbi"
    }),
    okText: '确定 ',
    cancelText: '',
    maskStyle: {
      background: 'rgb(0, 0, 0, 0.7)'
    }
  }, props), {
    icon: '',
    className: "modal-methods-info ".concat(props.className || '')
  });
  return AntModal.info(FuncProps);
};
var confirm = function confirm(props) {
  var FuncProps = _extends(_extends({
    centered: true,
    width: NORMALWIDTH,
    closable: true,
    closeIcon: /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-guanbi",
      className: "icon-guanbi"
    }),
    okText: '确定 ',
    cancelText: '取消 ',
    maskStyle: {
      background: 'rgb(0, 0, 0, 0.7)'
    }
  }, props), {
    icon: '',
    className: "modal-methods-info modal-methods-confirm ".concat(props.className || '')
  });
  return AntModal.confirm(FuncProps);
};
Modal.success = success;
Modal.error = error;
Modal.info = info;
Modal.confirm = confirm;
Modal.warning = warning;
Modal.warn = AntModal.warn;
Modal.config = AntModal.config;
Modal.useModal = AntModal.useModal;
Modal.destroyAll = AntModal.destroyAll;
export default Modal;