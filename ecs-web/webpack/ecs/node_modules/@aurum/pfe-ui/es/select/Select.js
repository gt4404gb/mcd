import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import React, { useEffect, useState } from 'react';
import IconFont from '../common/IconFont';
import { Select as AntdSelect, ConfigProvider } from 'antd';
import { IconSearch, IconCheck } from '@aurum/icons';
var Select = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState( /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-xiangxia"
    })),
    _useState4 = _slicedToArray(_useState3, 2),
    defaultSufIcon = _useState4[0],
    setDefaultIcon = _useState4[1];
  useEffect(function () {
    if (open) {
      setDefaultIcon( /*#__PURE__*/React.createElement(IconSearch, null));
    } else {
      setDefaultIcon( /*#__PURE__*/React.createElement(IconFont, {
        type: "icon-xiangxia"
      }));
    }
  }, [open]);
  var _props$placeholder = props.placeholder,
    placeholder = _props$placeholder === void 0 ? '请选择' : _props$placeholder,
    _props$showArrow = props.showArrow,
    showArrow = _props$showArrow === void 0 ? true : _props$showArrow,
    _props$suffixIcon = props.suffixIcon,
    suffixIcon = _props$suffixIcon === void 0 ? defaultSufIcon : _props$suffixIcon,
    showSearch = props.showSearch,
    className = props.className,
    _props$notFoundConten = props.notFoundContent,
    notFoundContent = _props$notFoundConten === void 0 ? /*#__PURE__*/React.createElement("div", {
      className: "".concat(getPrefixCls(), "-select-nodata")
    }, "\u6682\u65E0\u6570\u636E") : _props$notFoundConten,
    _props$menuItemSelect = props.menuItemSelectedIcon,
    menuItemSelectedIcon = _props$menuItemSelect === void 0 ? /*#__PURE__*/React.createElement(IconCheck, null) : _props$menuItemSelect,
    _onDropdownVisibleChange = props.onDropdownVisibleChange;
  return /*#__PURE__*/React.createElement(AntdSelect, _extends({}, props, {
    suffixIcon: suffixIcon,
    showArrow: showArrow,
    placeholder: placeholder,
    className: "".concat(className !== null && className !== void 0 ? className : '', " ").concat(showSearch ? '' : "".concat(getPrefixCls(), "-transform")),
    notFoundContent: notFoundContent,
    menuItemSelectedIcon: props.hiddenicon ? null : menuItemSelectedIcon,
    onDropdownVisibleChange: function onDropdownVisibleChange(dropOpen) {
      if (_onDropdownVisibleChange) {
        _onDropdownVisibleChange(dropOpen);
      }
      if (showSearch) {
        setOpen(dropOpen);
      }
    },
    ref: ref,
    dropdownClassName: !props.mode || props.mode === 'single' ? 'single-selected' : ''
  }));
});
Select.SECRET_COMBOBOX_MODE_DO_NOT_USE = AntdSelect.SECRET_COMBOBOX_MODE_DO_NOT_USE;
Select.OptGroup = AntdSelect.OptGroup;
Select.Option = AntdSelect.Option;
export default Select;