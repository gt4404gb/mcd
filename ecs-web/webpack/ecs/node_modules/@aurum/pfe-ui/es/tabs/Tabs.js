import _extends from "@babel/runtime/helpers/esm/extends";
var __rest = this && this.__rest || function (s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};
import React from 'react';
import IconFont from '../common/IconFont';
import { Tabs as AntdTabs, ConfigProvider } from 'antd';
import { default as TabPane } from './TabPane';
var Tabs = function Tabs(props) {
  var colorMap = {
    done: '#4880ff',
    todo: '#ffbc0d',
    reject: '#db0007'
  };
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
    getPrefixCls = _React$useContext.getPrefixCls;
  // eslint-disable-next-line @typescript-eslint/no-shadow
  var pfeRenderTabBar = function pfeRenderTabBar(props, DefaultTabBar) {
    return /*#__PURE__*/React.createElement(DefaultTabBar, props, function (node) {
      var _a, _b;
      var current;
      if (!Array.isArray(props.panes)) {
        current = props.panes;
      } else {
        current = props.panes.flat().find(function (i) {
          return i.key === node.key;
        });
      }
      var style = {};
      if (current) {
        var _status = (_a = current.props) === null || _a === void 0 ? void 0 : _a.status;
        var color = ((_b = current.props) === null || _b === void 0 ? void 0 : _b.dotColor) || colorMap[_status];
        style = {
          '--diy-color': color
        };
      }
      return /*#__PURE__*/React.createElement("div", {
        className: "".concat(getPrefixCls(), "-middle ").concat(status !== null && status !== void 0 ? status : '')
      }, /*#__PURE__*/React.cloneElement(node, {
        style: style
      }));
    });
  };
  var _props$className = props.className,
    className = _props$className === void 0 ? '' : _props$className,
    _props$renderTabBar = props.renderTabBar,
    renderTabBar = _props$renderTabBar === void 0 ? pfeRenderTabBar : _props$renderTabBar,
    _props$custype = props.custype,
    custype = _props$custype === void 0 ? '' : _props$custype,
    showDot = props.showDot,
    editableLine = props.editableLine,
    _props$lineColor = props.lineColor,
    lineColor = _props$lineColor === void 0 ? '#ffbc0d' : _props$lineColor,
    _props$moreIcon = props.moreIcon,
    moreIcon = _props$moreIcon === void 0 ? /*#__PURE__*/React.createElement(IconFont, {
      type: "icon-gengduo_heng"
    }) : _props$moreIcon,
    _props$style = props.style,
    style = _props$style === void 0 ? {} : _props$style,
    rest = __rest(props, ["className", "renderTabBar", "custype", "showDot", "editableLine", "lineColor", "moreIcon", "style"]);
  var pfeStyle = _extends(_extends({}, style), {
    '--lineColor': lineColor
  });
  var extraClass = '';
  if (custype === 'solid') {
    extraClass += "".concat(getPrefixCls(), "-solid ");
  }
  if (custype === 'common') {
    extraClass += "".concat(getPrefixCls(), "-tabs-common ");
  }
  if (!showDot) {
    extraClass += "".concat(getPrefixCls(), "-hidden-dot ");
  }
  if (editableLine) {
    extraClass += "".concat(getPrefixCls(), "-tabs-editable-line ");
  }
  return /*#__PURE__*/React.createElement(AntdTabs, _extends({}, rest, {
    style: _extends({}, pfeStyle),
    className: "".concat(extraClass, " ").concat(className),
    renderTabBar: renderTabBar,
    moreIcon: moreIcon
  }));
};
Tabs.TabPane = TabPane;
export default Tabs;