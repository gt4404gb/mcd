import axios from 'axios';
import cookies from 'js-cookie';
import { getToken, removeToken } from '@omc/boss-common/dist/utils/auth';
import { sign as apiSign } from '@omc/api-signer';

const message = {
  warning: (msg) => {
    console.log('[WARN]', msg)
  },
  error: (msg) => {
    console.error('[ERROR]', msg)
  },
}

const labels = {
  '4030': '登录过期',
  '4050': '权限不足',
}

export default (options = {}) => {
  options.message = options.message || message;
  // 创建axios实例
  const service = axios.create({
    // baseURL: process.env.VUE_APP_BASE_API, // api的base_url
  });
  if (options.isBoss === undefined) options.isBoss = true;
  // request拦截器
  service.interceptors.request.use(
    (config) => {
      if (options.isBoss) {
        let _token = getToken();
        if (_token) {
          config.headers['Authorization'] = _token; // 让每个请求携带自定义token 请根据实际情况自行修改 // change by wen hao
          if (!config.headers['Content-Type'])
            config.headers['Content-Type'] = 'application/json';
          config.headers['Cache-Control'] = 'no-cache';
        }
        let signs = localStorage.getItem('sign');
        if (signs) {
          config.headers['appkey'] = 'platform';
          config.headers['sign'] = signs;
        }
      }
      const sid = cookies.get('sid');
      if (sid) config.headers['sid'] = sid;
      const sign = apiSign(config);
      if (sign) config.headers['sign'] = sign;

      return config;
    },
    (error) => {
      // Do something with request error
      return Promise.reject(error);
    }
  );

  // respone拦截器
  service.interceptors.response.use(
    (response) => {
      if (options.closeLoading && window.__store) {
        window.__store.dispatch(options.closeLoading());
      }
      if (options.isBoss) {
        const res = response.data;
        if (response.headers) {
          if (parseInt(res.code) === 2010) {
            return;
          }
          const sysValues = ['syslang', 'sysdictionary', 'sysparams'];
          for (let i in response.headers) {
            if (response.headers.hasOwnProperty(i) && sysValues.includes(i)) {
              localStorage.setItem(i, response.headers[i]);
              return response.data;
            }
          }
        }
        if (parseInt(res.code) !== 2000) {
          // token过期
          if (parseInt(res.code) === 4030) {
            removeToken();
            options.message.warning(labels[res.code] || res.message ||  labels['4030']);
            setTimeout(() => {
              window.location.href = window.location.origin + '/login';
            }, 1000)
          } else if (parseInt(res.code) === 4050) {
            options.message.warning(labels[res.code] || res.message || labels['4050']);
            return Promise.reject(res);
          }
        }
        if (response.data.message === '签名错误') {
          options.message.error(response.config.url + ' - ' + response.data.message);
        }
      }
      if (options.responseXhr) {
        return Promise.resolve(response);
      } else {
        return Promise.resolve(response.data);
      }
    },
    (error) => {
      if (options.closeLoading && window.__store) {
        window.__store.dispatch(options.closeLoading());
      }

      if (error.toString() !== 'Cancel') {
        options.message.warning(error.message || '系统异常！');
      }

      return Promise.reject(error);
    }
  );
  return service;
}