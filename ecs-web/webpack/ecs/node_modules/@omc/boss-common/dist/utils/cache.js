// key
export var Constants = {
  SSO: 'SSO',
  getSSOInfo: 'getSSOInfo',
  Error: 'Error',
  LOADING_NUM: 'LOADING_NUM',
  TITLE: 'TITLE',
  SHOW_SIDEBAR: 'SHOW_SIDEBAR',
  STORAGE_VERSION: 'STORAGE_VERSION',
  USER_INFO: 'USER_INFO',
  DICTIONARY: 'DICTIONARY',
  DICTIONARYLIST: 'DICTIONARYLIST',
  PARAMETERS: 'PARAMETERS',
  LANGSWITCH: 'LANGSWITCH',
  THEMESWITCH: 'THEMESWITCH',
  MENU: 'MENU',
  I18N_DATA: 'I18N_DATA',
  LOCALE: 'locale',
  Theme_Color: 'Theme_Color',
  CLIENT_ROUTERS: 'CLIENT_ROUTERS',
  LEFT_MENU: 'LEFT_MENU',
  CURRENT_MENUID: 'CURRENT_MENUID',
  CURRENT_MENUNAME: 'CURRENT_MENUNAME',
  CURRENT_PATH: 'CURRENT_PATH',
  COMPANY: 'COMPANY',
  LANG_TYPE: 'LANG_TYPE',
  ISLOADING: 'ISLOADING',
  SSO_HREF: 'SSO_HREF',
  ROUTER: 'ROUTER',
  MYPERMISSION: 'MYPERMISSION',
  PATH_VALUE: 'PATH_VALUE',
  APPLICATION: 'APPLICATION',
  MENU_NAME_EN_CN: 'MENU_NAME_EN_CN',
  CURRENT_APPNAME: 'CURRENT_APPNAME'
}; //定时 缓存

var FDLocalStorage = {
  Cache: {
    /**
     * 总容量5M
     * 存入缓存，支持字符串类型、json对象的存储
     * 页面关闭后依然有效 ie7+都有效
     * @param key 缓存key
     * @param stringVal
     * @time 数字 缓存有效时间（秒） 默认10年（永久）
     * 注：localStorage 方法存储的数据没有时间限制。第二天、第二周或下一年之后，数据依然可用。不能控制缓存时间，故此扩展
     * */
    getNoExpireTime: function getNoExpireTime(key) {
      if (!localStorage) {
        return false;
      }

      return localStorage.getItem(key);
    },
    putNoExpireTime: function putNoExpireTime(key, stringVal) {
      try {
        if (!localStorage) {
          return false;
        }

        return localStorage.setItem(key, stringVal);
      } catch (e) {
        console.log(e);
      }
    },
    put: function put(key, stringVal, time) {
      try {
        if (!localStorage) {
          return false;
        }

        if (!time || isNaN(time)) {
          time = 3650 * 24 * 60 * 60;
        } //10年


        var cacheExpireDate = new Date() - 1 + time * 1000;
        var cacheVal = {
          val: stringVal,
          exp: cacheExpireDate
        };
        localStorage.setItem(key, JSON.stringify(cacheVal)); //存入缓存值
        //console.log(key+":存入缓存，"+new Date(cacheExpireDate)+"到期");
      } catch (e) {
        console.log(e);
      }
    },

    /**获取缓存*/
    get: function get(key) {
      try {
        if (!localStorage) {
          return false;
        }

        var cacheVal = localStorage.getItem(key);
        var result = JSON.parse(cacheVal);
        var now = new Date() - 1;

        if (!result) {
          return null;
        } //缓存不存在


        if (now > result.exp) {
          //缓存过期
          this.remove(key);
          return '';
        } //console.log("get cache:"+key);


        return result.val;
      } catch (e) {
        this.remove(key);
        return null;
      }
    },

    /**移除缓存，一般情况不手动调用，缓存过期自动调用*/
    remove: function remove(key) {
      if (!localStorage) {
        return false;
      }

      localStorage.removeItem(key);
    },

    /**清空所有缓存*/
    clear: function clear() {
      if (!localStorage) {
        return false;
      }

      localStorage.clear();
    },

    /**浏览器最大可用*/
    max: function max() {},

    /**当前最大可用*/
    last: function last() {},

    /**已用*/
    used: function used() {}
  } //end Cache

}; // 获取缓存

export function getLocalItem(name) {
  if (!global.window || !name) {
    return;
  }

  var content = window.localStorage.getItem(name);

  var _expire = window.localStorage.getItem("".concat(name, "_expire"));

  if (_expire) {
    var now = parseInt(new Date().getTime() / 1000);

    if (now > _expire) {
      return;
    }
  }

  try {
    return JSON.parse(content);
  } catch (e) {
    return content;
  }
} // 设置缓存

export function setLocalItem(name, content) {
  var maxAge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!global.window || !name) {
    return;
  }

  if (typeof content !== 'string') {
    content = JSON.stringify(content);
  }

  var storage = global.window.localStorage;
  storage.setItem(name, content);

  if (maxAge && !isNaN(parseInt(maxAge))) {
    var timeout = parseInt(new Date().getTime() / 1000);
    storage.setItem("".concat(name, "_expire"), timeout + maxAge);
  }
} // 移除缓存

export function removeLocalItem(name) {
  if (!global.window || !name) {
    return;
  }

  window.localStorage.removeItem(name);
  window.localStorage.removeItem("".concat(name, "_expire"));
} // 清除全部

export var clearAll = function clearAll() {
  if (!global.window || !name) {
    return;
  }

  window.localStorage.clear();
};