import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _regeneratorRuntime from "@babel/runtime/regenerator";

var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

import * as React from 'react';
import { ConfigProvider, Upload, Modal } from 'antd';
import IconFont from '../common/IconFont';

function getBase64(file) {
  return new Promise(function (resolve, reject) {
    var reader = new FileReader();
    reader.readAsDataURL(file);

    reader.onload = function () {
      return resolve(reader.result);
    };

    reader.onerror = function (error) {
      return reject(error);
    };
  });
}

export default (function (props) {
  var _React$useContext = React.useContext(ConfigProvider.ConfigContext),
      getPrefixCls = _React$useContext.getPrefixCls;

  var _React$useState = React.useState(false),
      _React$useState2 = _slicedToArray(_React$useState, 2),
      previewVisible = _React$useState2[0],
      setPreviewVisible = _React$useState2[1];

  var _React$useState3 = React.useState(''),
      _React$useState4 = _slicedToArray(_React$useState3, 2),
      previewImage = _React$useState4[0],
      setPreviewImage = _React$useState4[1];

  var _React$useState5 = React.useState(''),
      _React$useState6 = _slicedToArray(_React$useState5, 2),
      previewTitle = _React$useState6[0],
      setPreviewTitle = _React$useState6[1];

  var _React$useState7 = React.useState([]),
      _React$useState8 = _slicedToArray(_React$useState7, 2),
      fileList = _React$useState8[0],
      setFileList = _React$useState8[1];

  var handleCancel = function handleCancel() {
    return setPreviewVisible(false);
  };

  var handlePreview = function handlePreview(file) {
    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!(!file.url && !file.preview)) {
                _context.next = 4;
                break;
              }

              _context.next = 3;
              return getBase64(file.originFileObj);

            case 3:
              file.preview = _context.sent;

            case 4:
              setPreviewImage(file.url || file.preview);
              setPreviewVisible(true);
              setPreviewTitle(file.name || file.url.substring(file.url.lastIndexOf('/') + 1));

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
  };

  var handleChange = function handleChange(e) {
    var onChange = props.onChange;
    var _fileList = e.fileList;
    onChange && onChange(e);
    setFileList(_fileList);
  };

  var uploadButton = /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(IconFont, {
    type: "icon-zhaopian",
    className: "".concat(getPrefixCls(), "-upload-multiple-image-zhaopian-icon")
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      marginTop: 8,
      color: '#999999',
      fontSize: '14px'
    },
    className: "upload-desc"
  }, "\u70B9\u51FB\u4E0A\u4F20\u56FE\u7247"));
  return /*#__PURE__*/React.createElement("div", {
    className: "".concat(getPrefixCls(), "-upload-multiple-image")
  }, /*#__PURE__*/React.createElement(Upload, _extends({
    progress: {
      strokeColor: '#ffbc0d',
      strokeWidth: 6
    },
    listType: "picture-card",
    fileList: fileList,
    onPreview: handlePreview,
    onChange: handleChange,
    multiple: true
  }, props), fileList.length >= 8 ? null : uploadButton), /*#__PURE__*/React.createElement(Modal, {
    visible: previewVisible,
    title: previewTitle,
    footer: null,
    onCancel: handleCancel
  }, /*#__PURE__*/React.createElement("img", {
    alt: "example",
    style: {
      width: '100%'
    },
    src: previewImage
  })));
});